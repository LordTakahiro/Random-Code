// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Coin
#include <Coin.h>
#endif
#ifndef INCLUDED_GameOverState
#include <GameOverState.h>
#endif
#ifndef INCLUDED_HUD
#include <HUD.h>
#endif
#ifndef INCLUDED_Inventory
#include <Inventory.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_Watch
#include <flixel/system/debug/watch/Watch.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_WatchEntryData
#include <flixel/system/debug/watch/WatchEntryData.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapAutoTiling
#include <flixel/tile/FlxTilemapAutoTiling.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

static const Int _hx_array_data_0[] = {
	(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,
};
static const Int _hx_array_data_1[] = {
	(Int)2,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)2,
};
static const Int _hx_array_data_2[] = {
	(Int)2,(Int)1,(Int)2,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)2,
};
static const Int _hx_array_data_3[] = {
	(Int)2,(Int)1,(Int)1,(Int)1,(Int)1,(Int)2,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)2,
};
static const Int _hx_array_data_4[] = {
	(Int)2,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)2,
};
static const Int _hx_array_data_5[] = {
	(Int)2,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)2,
};
static const Int _hx_array_data_6[] = {
	(Int)2,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)1,(Int)2,
};
static const Int _hx_array_data_7[] = {
	(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,(Int)2,
};

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACK_FRAME("PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",23,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  35)		this->mapData = ::Array_obj< ::Dynamic>::__new(8)->init(0,::Array_obj< Int >::fromData( _hx_array_data_0,15))->init(1,::Array_obj< Int >::fromData( _hx_array_data_1,15))->init(2,::Array_obj< Int >::fromData( _hx_array_data_2,15))->init(3,::Array_obj< Int >::fromData( _hx_array_data_3,15))->init(4,::Array_obj< Int >::fromData( _hx_array_data_4,15))->init(5,::Array_obj< Int >::fromData( _hx_array_data_5,15))->init(6,::Array_obj< Int >::fromData( _hx_array_data_6,15))->init(7,::Array_obj< Int >::fromData( _hx_array_data_7,15));
HXLINE(  30)		this->_maxHP = ((Float)0);
HXLINE(  23)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(MaxSize);
	return _hx_result;
}

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void PlayState_obj::create(){
            	HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",45,0xb30d7781)
            	HX_STACK_THIS(this)
HXLINE(  46)		this->_sndLose = ::flixel::FlxG_obj::sound->load(HX_("assets/music/lose.wav",49,fb,3d,2d),null(),null(),null(),null(),null(),null(),null());
HXLINE(  47)		this->_map =  ::flixel::tile::FlxTilemap_obj::__new();
HXLINE(  48)		this->_map->loadMapFrom2DArray(this->mapData,HX_("assets/images/tiles.png",35,bc,d1,f5),(int)16,(int)16,null(),null(),null(),null());
HXLINE(  49)		this->_map->setTileProperties((int)1,(int)0,null(),null(),null());
HXLINE(  50)		this->_map->setTileProperties((int)2,(int)4369,null(),null(),null());
HXLINE(  51)		this->add(this->_map);
HXLINE(  52)		this->_player =  ::Player_obj::__new(null(),null());
HXLINE(  53)		this->_player->set_x((int)17);
HXLINE(  54)		this->_player->set_y((int)17);
HXLINE(  55)		this->_maxHP = this->_player->health;
HXLINE(  56)		this->add(this->_player);
HXLINE(  57)		::hx::EnumBase _hx_tmp = ::flixel::_hx_system::debug::watch::WatchEntryData_obj::FIELD(this->_player,HX_("health",9c,28,06,fd));
HXDLIN(  57)		::flixel::FlxG_obj::game->debugger->watch->add(HX_("Health",bc,9c,9a,31),_hx_tmp);
HXLINE(  58)		::hx::EnumBase _hx_tmp1 = ::flixel::_hx_system::debug::watch::WatchEntryData_obj::FIELD(this->_player,HX_("x",78,00,00,00));
HXDLIN(  58)		::flixel::FlxG_obj::game->debugger->watch->add(HX_("X",58,00,00,00),_hx_tmp1);
HXLINE(  59)		::flixel::FlxG_obj::camera->follow(this->_player,::flixel::FlxCameraFollowStyle_obj::TOPDOWN_dyn(),(int)1);
HXLINE(  60)		this->_hud =  ::HUD_obj::__new();
HXLINE(  61)		this->add(this->_hud);
HXLINE(  62)		this->_inv =  ::Inventory_obj::__new(this->_player->inventory);
HXLINE(  63)		this->_inv->set_visible(false);
HXLINE(  64)		this->add(this->_inv);
HXLINE(  65)		this->super::create();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACK_FRAME("PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",68,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  70)		this->super::update(elapsed);
HXLINE(  71)		this->inventory();
HXLINE(  72)		Bool _hx_tmp = hx::IsNull( ::flixel::FlxG_obj::sound->music );
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  76)			::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/music.ogg",10,2a,92,80),(int)1,true,null());
            		}
HXLINE(  79)		if (this->_ending) {
HXLINE(  80)			return;
            		}
HXLINE(  82)		this->_hud->updateHUD(this->_player->health,this->_maxHP);
HXLINE(  83)		Bool _hx_tmp1 = (this->_player->health == (int)0);
HXDLIN(  83)		if (_hx_tmp1) {
HXLINE(  84)			this->_sndLose->play(null(),null(),null());
HXLINE(  85)			this->_ending = true;
HXLINE(  86)			::flixel::FlxG_obj::camera->fade((int)-16777216,((Float).33),false,this->doneFadeOut_dyn(),null());
            		}
HXLINE(  88)		::flixel::FlxG_obj::overlap(this->_player,this->_map,null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE(  89)		::flixel::FlxG_obj::overlap(this->_player,this->_grpCoins,this->playerTouchCoin_dyn(),null());
            	}


void PlayState_obj::placeEntities(::String entityName, ::Xml entityData){
            	HX_STACK_FRAME("PlayState","placeEntities",0xcb21ad57,"PlayState.placeEntities","PlayState.hx",92,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(entityName,"entityName")
            	HX_STACK_ARG(entityData,"entityData")
HXLINE(  94)		::String _hx_tmp = entityData->get(HX_("x",78,00,00,00));
HXDLIN(  94)		HX_VARI( Int,x) = ::Std_obj::parseInt(_hx_tmp);
HXLINE(  95)		::String _hx_tmp1 = entityData->get(HX_("y",79,00,00,00));
HXDLIN(  95)		HX_VARI( Int,y) = ::Std_obj::parseInt(_hx_tmp1);
HXLINE(  96)		if ((entityName == HX_("Player",81,5f,4d,6c))) {
HXLINE(  98)			this->_player->set_x(x);
HXLINE(  99)			this->_player->set_y(y);
            		}
            		else {
HXLINE( 101)			if ((entityName == HX_("coins",c2,29,5a,4a))) {
HXLINE( 102)				this->_grpCoins->add( ::Coin_obj::__new((x + (int)4),(y + (int)4))).StaticCast<  ::Coin >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,placeEntities,(void))

void PlayState_obj::doneFadeOut(){
            	HX_STACK_FRAME("PlayState","doneFadeOut",0xf3a9b17f,"PlayState.doneFadeOut","PlayState.hx",107,0xb30d7781)
            	HX_STACK_THIS(this)
HXLINE( 107)		HX_VARI(  ::flixel::FlxState,nextState) =  ::GameOverState_obj::__new(this->_won);
HXDLIN( 107)		Bool _hx_tmp = ::flixel::FlxG_obj::game->_state->switchTo(nextState);
HXDLIN( 107)		if (_hx_tmp) {
HXLINE( 107)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,doneFadeOut,(void))

void PlayState_obj::playerTouchCoin( ::Player P, ::Coin C){
            	HX_STACK_FRAME("PlayState","playerTouchCoin",0x7f00763e,"PlayState.playerTouchCoin","PlayState.hx",111,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(P,"P")
            	HX_STACK_ARG(C,"C")
HXLINE( 111)		Bool _hx_tmp;
HXDLIN( 111)		Bool _hx_tmp1;
HXDLIN( 111)		Bool _hx_tmp2;
HXDLIN( 111)		if (P->alive) {
HXLINE( 111)			_hx_tmp2 = P->exists;
            		}
            		else {
HXLINE( 111)			_hx_tmp2 = false;
            		}
HXDLIN( 111)		if (_hx_tmp2) {
HXLINE( 111)			_hx_tmp1 = C->alive;
            		}
            		else {
HXLINE( 111)			_hx_tmp1 = false;
            		}
HXDLIN( 111)		if (_hx_tmp1) {
HXLINE( 111)			_hx_tmp = C->exists;
            		}
            		else {
HXLINE( 111)			_hx_tmp = false;
            		}
HXDLIN( 111)		if (_hx_tmp) {
HXLINE( 113)			C->kill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,playerTouchCoin,(void))

void PlayState_obj::inventory(){
            	HX_STACK_FRAME("PlayState","inventory",0x85093a4b,"PlayState.inventory","PlayState.hx",117,0xb30d7781)
            	HX_STACK_THIS(this)
HXLINE( 119)		HX_VARI( Bool,_i) = false;
HXLINE( 120)		HX_VARI(  ::flixel::input::keyboard::FlxKeyList,_this) = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 120)		_i = _this->keyManager->checkStatus((int)73,_this->status);
HXLINE( 122)		if (_i) {
HXLINE( 124)			Bool _hx_tmp = this->invOpen;
HXDLIN( 124)			if (_hx_tmp) {
HXLINE( 125)				this->invOpen = false;
            			}
            			else {
HXLINE( 128)				this->invOpen = true;
            			}
HXLINE( 130)			this->_player->openInventory(this->_inv,this->invOpen);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,inventory,(void))


PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(_sndLose,"_sndLose");
	HX_MARK_MEMBER_NAME(_player,"_player");
	HX_MARK_MEMBER_NAME(_map,"_map");
	HX_MARK_MEMBER_NAME(_hud,"_hud");
	HX_MARK_MEMBER_NAME(_inv,"_inv");
	HX_MARK_MEMBER_NAME(_maxHP,"_maxHP");
	HX_MARK_MEMBER_NAME(_grpCoins,"_grpCoins");
	HX_MARK_MEMBER_NAME(_ending,"_ending");
	HX_MARK_MEMBER_NAME(_won,"_won");
	HX_MARK_MEMBER_NAME(mapData,"mapData");
	HX_MARK_MEMBER_NAME(invOpen,"invOpen");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_sndLose,"_sndLose");
	HX_VISIT_MEMBER_NAME(_player,"_player");
	HX_VISIT_MEMBER_NAME(_map,"_map");
	HX_VISIT_MEMBER_NAME(_hud,"_hud");
	HX_VISIT_MEMBER_NAME(_inv,"_inv");
	HX_VISIT_MEMBER_NAME(_maxHP,"_maxHP");
	HX_VISIT_MEMBER_NAME(_grpCoins,"_grpCoins");
	HX_VISIT_MEMBER_NAME(_ending,"_ending");
	HX_VISIT_MEMBER_NAME(_won,"_won");
	HX_VISIT_MEMBER_NAME(mapData,"mapData");
	HX_VISIT_MEMBER_NAME(invOpen,"invOpen");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_map") ) { return hx::Val( _map); }
		if (HX_FIELD_EQ(inName,"_hud") ) { return hx::Val( _hud); }
		if (HX_FIELD_EQ(inName,"_inv") ) { return hx::Val( _inv); }
		if (HX_FIELD_EQ(inName,"_won") ) { return hx::Val( _won); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_maxHP") ) { return hx::Val( _maxHP); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { return hx::Val( _player); }
		if (HX_FIELD_EQ(inName,"_ending") ) { return hx::Val( _ending); }
		if (HX_FIELD_EQ(inName,"mapData") ) { return hx::Val( mapData); }
		if (HX_FIELD_EQ(inName,"invOpen") ) { return hx::Val( invOpen); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sndLose") ) { return hx::Val( _sndLose); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_grpCoins") ) { return hx::Val( _grpCoins); }
		if (HX_FIELD_EQ(inName,"inventory") ) { return hx::Val( inventory_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"doneFadeOut") ) { return hx::Val( doneFadeOut_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"placeEntities") ) { return hx::Val( placeEntities_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playerTouchCoin") ) { return hx::Val( playerTouchCoin_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_map") ) { _map=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_hud") ) { _hud=inValue.Cast<  ::HUD >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_inv") ) { _inv=inValue.Cast<  ::Inventory >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_won") ) { _won=inValue.Cast< Bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_maxHP") ) { _maxHP=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { _player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ending") ) { _ending=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mapData") ) { mapData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"invOpen") ) { invOpen=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sndLose") ) { _sndLose=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_grpCoins") ) { _grpCoins=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_sndLose","\x5f","\x3b","\xc1","\xa9"));
	outFields->push(HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"));
	outFields->push(HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f"));
	outFields->push(HX_HCSTRING("_hud","\xb8","\x95","\x1a","\x3f"));
	outFields->push(HX_HCSTRING("_inv","\xf2","\x51","\x1b","\x3f"));
	outFields->push(HX_HCSTRING("_maxHP","\xed","\x81","\x0d","\xff"));
	outFields->push(HX_HCSTRING("_grpCoins","\xfc","\xc6","\xf0","\x74"));
	outFields->push(HX_HCSTRING("_ending","\x86","\xb5","\xff","\x68"));
	outFields->push(HX_HCSTRING("_won","\x57","\xf2","\x25","\x3f"));
	outFields->push(HX_HCSTRING("mapData","\xe6","\x0a","\x5f","\x27"));
	outFields->push(HX_HCSTRING("invOpen","\x5b","\x09","\x65","\x2f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,_sndLose),HX_HCSTRING("_sndLose","\x5f","\x3b","\xc1","\xa9")},
	{hx::fsObject /*::Player*/ ,(int)offsetof(PlayState_obj,_player),HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,_map),HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f")},
	{hx::fsObject /*::HUD*/ ,(int)offsetof(PlayState_obj,_hud),HX_HCSTRING("_hud","\xb8","\x95","\x1a","\x3f")},
	{hx::fsObject /*::Inventory*/ ,(int)offsetof(PlayState_obj,_inv),HX_HCSTRING("_inv","\xf2","\x51","\x1b","\x3f")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,_maxHP),HX_HCSTRING("_maxHP","\xed","\x81","\x0d","\xff")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_grpCoins),HX_HCSTRING("_grpCoins","\xfc","\xc6","\xf0","\x74")},
	{hx::fsBool,(int)offsetof(PlayState_obj,_ending),HX_HCSTRING("_ending","\x86","\xb5","\xff","\x68")},
	{hx::fsBool,(int)offsetof(PlayState_obj,_won),HX_HCSTRING("_won","\x57","\xf2","\x25","\x3f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(PlayState_obj,mapData),HX_HCSTRING("mapData","\xe6","\x0a","\x5f","\x27")},
	{hx::fsBool,(int)offsetof(PlayState_obj,invOpen),HX_HCSTRING("invOpen","\x5b","\x09","\x65","\x2f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("_sndLose","\x5f","\x3b","\xc1","\xa9"),
	HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"),
	HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f"),
	HX_HCSTRING("_hud","\xb8","\x95","\x1a","\x3f"),
	HX_HCSTRING("_inv","\xf2","\x51","\x1b","\x3f"),
	HX_HCSTRING("_maxHP","\xed","\x81","\x0d","\xff"),
	HX_HCSTRING("_grpCoins","\xfc","\xc6","\xf0","\x74"),
	HX_HCSTRING("_ending","\x86","\xb5","\xff","\x68"),
	HX_HCSTRING("_won","\x57","\xf2","\x25","\x3f"),
	HX_HCSTRING("mapData","\xe6","\x0a","\x5f","\x27"),
	HX_HCSTRING("invOpen","\x5b","\x09","\x65","\x2f"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("placeEntities","\x28","\xe6","\x91","\x17"),
	HX_HCSTRING("doneFadeOut","\x10","\x64","\x5b","\xea"),
	HX_HCSTRING("playerTouchCoin","\x4f","\x45","\x8d","\xf2"),
	HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

