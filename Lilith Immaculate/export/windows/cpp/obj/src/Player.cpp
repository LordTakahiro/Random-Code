// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Inventory
#include <Inventory.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

static const Int _hx_array_data_0[] = {
	(Int)3,(Int)4,(Int)3,(Int)5,
};
static const Int _hx_array_data_1[] = {
	(Int)6,(Int)7,(Int)6,(Int)8,
};
static const Int _hx_array_data_2[] = {
	(Int)0,(Int)1,(Int)0,(Int)2,
};
static const Int _hx_array_data_3[] = {
	(Int)38,(Int)87,
};
static const Int _hx_array_data_4[] = {
	(Int)40,(Int)83,
};
static const Int _hx_array_data_5[] = {
	(Int)37,(Int)65,
};
static const Int _hx_array_data_6[] = {
	(Int)39,(Int)68,
};

void Player_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACK_FRAME("Player","new",0x8d5554f3,"Player.new","Player.hx",17,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(  23)		this->speed = ((Float)160);
HXLINE(  35)		super::__construct(X,Y,null());
HXLINE(  36)		this->_sndStep = ::flixel::FlxG_obj::sound->load(HX_("assets/music/step.wav",40,c0,f3,49),null(),null(),null(),null(),null(),null(),null());
HXLINE(  37)		this->_sndHurt = ::flixel::FlxG_obj::sound->load(HX_("assets/music/hurt.wav",83,52,9c,7e),null(),null(),null(),null(),null(),null(),null());
HXLINE(  38)		this->loadGraphic(HX_("assets/images/player.png",87,88,81,c6),true,(int)16,(int)16,null(),null());
HXLINE(  39)		this->_facingFlip->set((int)1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  40)		this->_facingFlip->set((int)16, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),true)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  41)		this->animation->add(HX_("lr",86,5e,00,00),::Array_obj< Int >::fromData( _hx_array_data_0,4),(int)6,false,null(),null());
HXLINE(  42)		this->animation->add(HX_("u",75,00,00,00),::Array_obj< Int >::fromData( _hx_array_data_1,4),(int)6,false,null(),null());
HXLINE(  43)		this->animation->add(HX_("d",64,00,00,00),::Array_obj< Int >::fromData( _hx_array_data_2,4),(int)6,false,null(),null());
HXLINE(  44)		Float _hx_tmp = this->drag->set_y((int)1600);
HXDLIN(  44)		this->drag->set_x(_hx_tmp);
HXLINE(  45)		this->setSize((int)8,(int)14);
HXLINE(  46)		this->offset->set((int)4,(int)2);
HXLINE(  47)		this->set_mana((int)50);
HXLINE(  48)		this->set_str((int)10);
HXLINE(  49)		this->set_int((int)10);
HXLINE(  50)		this->set_dex((int)10);
HXLINE(  51)		this->set_vit((int)10);
HXLINE(  52)		this->set_will((int)10);
HXLINE(  53)		this->set_luck((int)3);
HXLINE(  54)		this->set_def((int)10);
HXLINE(  55)		this->health = (int)30;
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

hx::ObjectPtr< Player_obj > Player_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(__o_X,__o_Y);
	return _hx_result;
}

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void Player_obj::movment(){
            	HX_STACK_FRAME("Player","movment",0x79dd2085,"Player.movment","Player.hx",58,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE(  59)		HX_VARI( Bool,_up) = false;
HXLINE(  60)		HX_VARI( Bool,_down) = false;
HXLINE(  61)		HX_VARI( Bool,_left) = false;
HXLINE(  62)		HX_VARI( Bool,_right) = false;
HXLINE(  63)		_up = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< Int >::fromData( _hx_array_data_3,2),(int)1);
HXLINE(  64)		_down = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< Int >::fromData( _hx_array_data_4,2),(int)1);
HXLINE(  65)		_left = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< Int >::fromData( _hx_array_data_5,2),(int)1);
HXLINE(  66)		_right = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< Int >::fromData( _hx_array_data_6,2),(int)1);
HXLINE(  68)		Bool _hx_tmp;
HXDLIN(  68)		if (_up) {
HXLINE(  68)			_hx_tmp = _down;
            		}
            		else {
HXLINE(  68)			_hx_tmp = false;
            		}
HXDLIN(  68)		if (_hx_tmp) {
HXLINE(  69)			_down = false;
HXDLIN(  69)			_up = false;
            		}
HXLINE(  70)		Bool _hx_tmp1;
HXDLIN(  70)		if (_left) {
HXLINE(  70)			_hx_tmp1 = _right;
            		}
            		else {
HXLINE(  70)			_hx_tmp1 = false;
            		}
HXDLIN(  70)		if (_hx_tmp1) {
HXLINE(  71)			_right = false;
HXDLIN(  71)			_left = false;
            		}
HXLINE(  73)		Bool _hx_tmp2;
HXDLIN(  73)		Bool _hx_tmp3;
HXDLIN(  73)		Bool _hx_tmp4;
HXDLIN(  73)		if (!(_up)) {
HXLINE(  73)			_hx_tmp4 = _down;
            		}
            		else {
HXLINE(  73)			_hx_tmp4 = true;
            		}
HXDLIN(  73)		if (!(_hx_tmp4)) {
HXLINE(  73)			_hx_tmp3 = _left;
            		}
            		else {
HXLINE(  73)			_hx_tmp3 = true;
            		}
HXDLIN(  73)		if (!(_hx_tmp3)) {
HXLINE(  73)			_hx_tmp2 = _right;
            		}
            		else {
HXLINE(  73)			_hx_tmp2 = true;
            		}
HXDLIN(  73)		if (_hx_tmp2) {
HXLINE(  74)			HX_VARI( Float,mA) = (int)0;
HXLINE(  75)			if (_up) {
HXLINE(  76)				mA = (int)-90;
HXLINE(  77)				if (_left) {
HXLINE(  78)					hx::SubEq(mA,(int)45);
            				}
            				else {
HXLINE(  79)					if (_right) {
HXLINE(  80)						hx::AddEq(mA,(int)45);
            					}
            				}
HXLINE(  81)				this->set_facing((int)256);
            			}
            			else {
HXLINE(  83)				if (_down) {
HXLINE(  84)					mA = (int)90;
HXLINE(  85)					if (_left) {
HXLINE(  86)						hx::AddEq(mA,(int)45);
            					}
            					else {
HXLINE(  87)						if (_right) {
HXLINE(  88)							hx::SubEq(mA,(int)45);
            						}
            					}
HXLINE(  89)					this->set_facing((int)4096);
            				}
            				else {
HXLINE(  91)					if (_left) {
HXLINE(  92)						mA = (int)180;
HXLINE(  93)						this->set_facing((int)1);
            					}
            					else {
HXLINE(  95)						if (_right) {
HXLINE(  96)							mA = (int)0;
HXLINE(  97)							this->set_facing((int)16);
            						}
            					}
            				}
            			}
HXLINE( 100)			this->velocity->set(this->speed,(int)0);
HXLINE( 101)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 101)			point->_inPool = false;
HXDLIN( 101)			point->_weak = true;
HXDLIN( 101)			this->velocity->rotate(point,mA);
HXLINE( 103)			Bool _hx_tmp5;
HXDLIN( 103)			Bool _hx_tmp6;
HXDLIN( 103)			if ((this->velocity->x == (int)0)) {
HXLINE( 103)				_hx_tmp6 = (this->velocity->y != (int)0);
            			}
            			else {
HXLINE( 103)				_hx_tmp6 = true;
            			}
HXDLIN( 103)			if (_hx_tmp6) {
HXLINE( 103)				_hx_tmp5 = (this->touching == (int)0);
            			}
            			else {
HXLINE( 103)				_hx_tmp5 = false;
            			}
HXDLIN( 103)			if (_hx_tmp5) {
HXLINE( 104)				this->_sndStep->play(null(),null(),null());
HXLINE( 105)				{
HXLINE( 105)					HX_VARI( Int,_g) = this->facing;
HXDLIN( 105)					switch((int)(_g)){
            						case (int)1: case (int)16: {
HXLINE( 107)							this->animation->play(HX_("lr",86,5e,00,00),null(),null(),null());
            						}
            						break;
            						case (int)256: {
HXLINE( 109)							this->animation->play(HX_("u",75,00,00,00),null(),null(),null());
            						}
            						break;
            						case (int)4096: {
HXLINE( 111)							this->animation->play(HX_("d",64,00,00,00),null(),null(),null());
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,movment,(void))

void Player_obj::takeDamage(Int amount){
            	HX_STACK_FRAME("Player","takeDamage",0x11ac2fe3,"Player.takeDamage","Player.hx",117,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(amount,"amount")
HXLINE( 118)		HX_VARI( Float,tempHP) = this->health;
HXLINE( 119)		this->health = (tempHP - amount);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,takeDamage,(void))

void Player_obj::randomButton(){
            	HX_STACK_FRAME("Player","randomButton",0xcd3aad62,"Player.randomButton","Player.hx",122,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE( 123)		HX_VARI( Bool,_x) = false;
HXLINE( 125)		HX_VARI(  ::flixel::input::keyboard::FlxKeyList,_this) = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 125)		_x = _this->keyManager->checkStatus((int)88,_this->status);
HXLINE( 128)		if (_x) {
HXLINE( 129)			{
HXLINE( 129)				HX_VARI_NAME(  ::flixel::_hx_system::FlxSound,_this1,"_this") = this->_sndHurt;
HXDLIN( 129)				_this1->cleanup(_this1->autoDestroy,true);
            			}
HXLINE( 130)			this->_sndHurt->play(null(),null(),null());
HXLINE( 131)			this->takeDamage((int)5);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,randomButton,(void))

void Player_obj::openInventory( ::Inventory _inv,Bool arg){
            	HX_STACK_FRAME("Player","openInventory",0x4bc5a3c5,"Player.openInventory","Player.hx",136,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_inv,"_inv")
            	HX_STACK_ARG(arg,"arg")
HXLINE( 136)		if (arg) {
HXLINE( 137)			_inv->set_visible(true);
            		}
            		else {
HXLINE( 140)			_inv->set_visible(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Player_obj,openInventory,(void))

void Player_obj::update(Float elapsed){
            	HX_STACK_FRAME("Player","update",0xf1f8df56,"Player.update","Player.hx",146,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 148)		this->movment();
HXLINE( 149)		this->randomButton();
HXLINE( 151)		Bool _hx_tmp = (this->health == (int)0);
HXDLIN( 151)		if (_hx_tmp) {
HXLINE( 152)			this->set_alive(false);
HXLINE( 153)			this->kill();
            		}
HXLINE( 155)		this->super::update(elapsed);
            	}


Int Player_obj::get_str(){
            	HX_STACK_FRAME("Player","get_str",0x50c73b5b,"Player.get_str","Player.hx",158,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE( 158)		return this->str;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_str,return )

Int Player_obj::set_str(Int value){
            	HX_STACK_FRAME("Player","set_str",0x43c8cc67,"Player.set_str","Player.hx",159,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 159)		return (this->str = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_str,return )

Int Player_obj::get_mana(){
            	HX_STACK_FRAME("Player","get_mana",0x5986fe9d,"Player.get_mana","Player.hx",160,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE( 160)		return this->mana;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_mana,return )

Int Player_obj::set_mana(Int value){
            	HX_STACK_FRAME("Player","set_mana",0x07e45811,"Player.set_mana","Player.hx",161,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 161)		return (this->mana = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_mana,return )

Int Player_obj::get_int(){
            	HX_STACK_FRAME("Player","get_int",0x50bf9f99,"Player.get_int","Player.hx",162,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE( 162)		return this->_hx_int;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_int,return )

Int Player_obj::set_int(Int value){
            	HX_STACK_FRAME("Player","set_int",0x43c130a5,"Player.set_int","Player.hx",163,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 163)		return (this->_hx_int = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_int,return )

Int Player_obj::get_dex(){
            	HX_STACK_FRAME("Player","get_dex",0x50bbcc81,"Player.get_dex","Player.hx",164,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE( 164)		return this->dex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_dex,return )

Int Player_obj::set_dex(Int value){
            	HX_STACK_FRAME("Player","set_dex",0x43bd5d8d,"Player.set_dex","Player.hx",165,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 165)		return (this->dex = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_dex,return )

Int Player_obj::get_vit(){
            	HX_STACK_FRAME("Player","get_vit",0x50c9788b,"Player.get_vit","Player.hx",166,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE( 166)		return this->vit;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_vit,return )

Int Player_obj::set_vit(Int value){
            	HX_STACK_FRAME("Player","set_vit",0x43cb0997,"Player.set_vit","Player.hx",167,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 167)		return (this->vit = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_vit,return )

Int Player_obj::get_will(){
            	HX_STACK_FRAME("Player","get_will",0x60293128,"Player.get_will","Player.hx",168,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE( 168)		return this->will;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_will,return )

Int Player_obj::set_will(Int value){
            	HX_STACK_FRAME("Player","set_will",0x0e868a9c,"Player.set_will","Player.hx",169,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 169)		return (this->will = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_will,return )

Int Player_obj::get_luck(){
            	HX_STACK_FRAME("Player","get_luck",0x58eceb87,"Player.get_luck","Player.hx",170,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE( 170)		return this->luck;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_luck,return )

Int Player_obj::set_luck(Int value){
            	HX_STACK_FRAME("Player","set_luck",0x074a44fb,"Player.set_luck","Player.hx",171,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 171)		return (this->luck = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_luck,return )

Int Player_obj::get_def(){
            	HX_STACK_FRAME("Player","get_def",0x50bbcc6f,"Player.get_def","Player.hx",172,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE( 172)		return this->def;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_def,return )

Int Player_obj::set_def(Int value){
            	HX_STACK_FRAME("Player","set_def",0x43bd5d7b,"Player.set_def","Player.hx",173,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 173)		return (this->def = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_def,return )


Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(_sndStep,"_sndStep");
	HX_MARK_MEMBER_NAME(_sndHurt,"_sndHurt");
	HX_MARK_MEMBER_NAME(inventory,"inventory");
	HX_MARK_MEMBER_NAME(equipped,"equipped");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(mana,"mana");
	HX_MARK_MEMBER_NAME(str,"str");
	HX_MARK_MEMBER_NAME(_hx_int,"int");
	HX_MARK_MEMBER_NAME(dex,"dex");
	HX_MARK_MEMBER_NAME(vit,"vit");
	HX_MARK_MEMBER_NAME(will,"will");
	HX_MARK_MEMBER_NAME(luck,"luck");
	HX_MARK_MEMBER_NAME(def,"def");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_sndStep,"_sndStep");
	HX_VISIT_MEMBER_NAME(_sndHurt,"_sndHurt");
	HX_VISIT_MEMBER_NAME(inventory,"inventory");
	HX_VISIT_MEMBER_NAME(equipped,"equipped");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(mana,"mana");
	HX_VISIT_MEMBER_NAME(str,"str");
	HX_VISIT_MEMBER_NAME(_hx_int,"int");
	HX_VISIT_MEMBER_NAME(dex,"dex");
	HX_VISIT_MEMBER_NAME(vit,"vit");
	HX_VISIT_MEMBER_NAME(will,"will");
	HX_VISIT_MEMBER_NAME(luck,"luck");
	HX_VISIT_MEMBER_NAME(def,"def");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"str") ) { return hx::Val( inCallProp == hx::paccAlways ? get_str() : str); }
		if (HX_FIELD_EQ(inName,"int") ) { return hx::Val( inCallProp == hx::paccAlways ? get_int() : _hx_int); }
		if (HX_FIELD_EQ(inName,"dex") ) { return hx::Val( inCallProp == hx::paccAlways ? get_dex() : dex); }
		if (HX_FIELD_EQ(inName,"vit") ) { return hx::Val( inCallProp == hx::paccAlways ? get_vit() : vit); }
		if (HX_FIELD_EQ(inName,"def") ) { return hx::Val( inCallProp == hx::paccAlways ? get_def() : def); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mana") ) { return hx::Val( inCallProp == hx::paccAlways ? get_mana() : mana); }
		if (HX_FIELD_EQ(inName,"will") ) { return hx::Val( inCallProp == hx::paccAlways ? get_will() : will); }
		if (HX_FIELD_EQ(inName,"luck") ) { return hx::Val( inCallProp == hx::paccAlways ? get_luck() : luck); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"movment") ) { return hx::Val( movment_dyn()); }
		if (HX_FIELD_EQ(inName,"get_str") ) { return hx::Val( get_str_dyn()); }
		if (HX_FIELD_EQ(inName,"set_str") ) { return hx::Val( set_str_dyn()); }
		if (HX_FIELD_EQ(inName,"get_int") ) { return hx::Val( get_int_dyn()); }
		if (HX_FIELD_EQ(inName,"set_int") ) { return hx::Val( set_int_dyn()); }
		if (HX_FIELD_EQ(inName,"get_dex") ) { return hx::Val( get_dex_dyn()); }
		if (HX_FIELD_EQ(inName,"set_dex") ) { return hx::Val( set_dex_dyn()); }
		if (HX_FIELD_EQ(inName,"get_vit") ) { return hx::Val( get_vit_dyn()); }
		if (HX_FIELD_EQ(inName,"set_vit") ) { return hx::Val( set_vit_dyn()); }
		if (HX_FIELD_EQ(inName,"get_def") ) { return hx::Val( get_def_dyn()); }
		if (HX_FIELD_EQ(inName,"set_def") ) { return hx::Val( set_def_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sndStep") ) { return hx::Val( _sndStep); }
		if (HX_FIELD_EQ(inName,"_sndHurt") ) { return hx::Val( _sndHurt); }
		if (HX_FIELD_EQ(inName,"equipped") ) { return hx::Val( equipped); }
		if (HX_FIELD_EQ(inName,"get_mana") ) { return hx::Val( get_mana_dyn()); }
		if (HX_FIELD_EQ(inName,"set_mana") ) { return hx::Val( set_mana_dyn()); }
		if (HX_FIELD_EQ(inName,"get_will") ) { return hx::Val( get_will_dyn()); }
		if (HX_FIELD_EQ(inName,"set_will") ) { return hx::Val( set_will_dyn()); }
		if (HX_FIELD_EQ(inName,"get_luck") ) { return hx::Val( get_luck_dyn()); }
		if (HX_FIELD_EQ(inName,"set_luck") ) { return hx::Val( set_luck_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { return hx::Val( inventory); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"takeDamage") ) { return hx::Val( takeDamage_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"randomButton") ) { return hx::Val( randomButton_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"openInventory") ) { return hx::Val( openInventory_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"str") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_str(inValue) );str=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"int") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_int(inValue) );_hx_int=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dex") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_dex(inValue) );dex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vit") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_vit(inValue) );vit=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"def") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_def(inValue) );def=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mana") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mana(inValue) );mana=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"will") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_will(inValue) );will=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luck") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_luck(inValue) );luck=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sndStep") ) { _sndStep=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_sndHurt") ) { _sndHurt=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"equipped") ) { equipped=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { inventory=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae"));
	outFields->push(HX_HCSTRING("_sndHurt","\x99","\xed","\x20","\xa7"));
	outFields->push(HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48"));
	outFields->push(HX_HCSTRING("equipped","\x1f","\xcc","\x11","\x73"));
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("mana","\x87","\x3c","\x56","\x48"));
	outFields->push(HX_HCSTRING("str","\xb1","\xa8","\x57","\x00"));
	outFields->push(HX_HCSTRING("int","\xef","\x0c","\x50","\x00"));
	outFields->push(HX_HCSTRING("dex","\xd7","\x39","\x4c","\x00"));
	outFields->push(HX_HCSTRING("vit","\xe1","\xe5","\x59","\x00"));
	outFields->push(HX_HCSTRING("will","\x12","\x6f","\xf8","\x4e"));
	outFields->push(HX_HCSTRING("luck","\x71","\x29","\xbc","\x47"));
	outFields->push(HX_HCSTRING("def","\xc5","\x39","\x4c","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Player_obj,_sndStep),HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Player_obj,_sndHurt),HX_HCSTRING("_sndHurt","\x99","\xed","\x20","\xa7")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Player_obj,inventory),HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Player_obj,equipped),HX_HCSTRING("equipped","\x1f","\xcc","\x11","\x73")},
	{hx::fsFloat,(int)offsetof(Player_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsInt,(int)offsetof(Player_obj,mana),HX_HCSTRING("mana","\x87","\x3c","\x56","\x48")},
	{hx::fsInt,(int)offsetof(Player_obj,str),HX_HCSTRING("str","\xb1","\xa8","\x57","\x00")},
	{hx::fsInt,(int)offsetof(Player_obj,_hx_int),HX_HCSTRING("int","\xef","\x0c","\x50","\x00")},
	{hx::fsInt,(int)offsetof(Player_obj,dex),HX_HCSTRING("dex","\xd7","\x39","\x4c","\x00")},
	{hx::fsInt,(int)offsetof(Player_obj,vit),HX_HCSTRING("vit","\xe1","\xe5","\x59","\x00")},
	{hx::fsInt,(int)offsetof(Player_obj,will),HX_HCSTRING("will","\x12","\x6f","\xf8","\x4e")},
	{hx::fsInt,(int)offsetof(Player_obj,luck),HX_HCSTRING("luck","\x71","\x29","\xbc","\x47")},
	{hx::fsInt,(int)offsetof(Player_obj,def),HX_HCSTRING("def","\xc5","\x39","\x4c","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae"),
	HX_HCSTRING("_sndHurt","\x99","\xed","\x20","\xa7"),
	HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48"),
	HX_HCSTRING("equipped","\x1f","\xcc","\x11","\x73"),
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("mana","\x87","\x3c","\x56","\x48"),
	HX_HCSTRING("str","\xb1","\xa8","\x57","\x00"),
	HX_HCSTRING("int","\xef","\x0c","\x50","\x00"),
	HX_HCSTRING("dex","\xd7","\x39","\x4c","\x00"),
	HX_HCSTRING("vit","\xe1","\xe5","\x59","\x00"),
	HX_HCSTRING("will","\x12","\x6f","\xf8","\x4e"),
	HX_HCSTRING("luck","\x71","\x29","\xbc","\x47"),
	HX_HCSTRING("def","\xc5","\x39","\x4c","\x00"),
	HX_HCSTRING("movment","\x72","\x56","\xe2","\x4f"),
	HX_HCSTRING("takeDamage","\x16","\xac","\xbd","\xb1"),
	HX_HCSTRING("randomButton","\x55","\xdc","\xc9","\xb1"),
	HX_HCSTRING("openInventory","\x72","\x89","\x7f","\x64"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("get_str","\x48","\x71","\xcc","\x26"),
	HX_HCSTRING("set_str","\x54","\x02","\xce","\x19"),
	HX_HCSTRING("get_mana","\x10","\xf8","\x10","\xc8"),
	HX_HCSTRING("set_mana","\x84","\x51","\x6e","\x76"),
	HX_HCSTRING("get_int","\x86","\xd5","\xc4","\x26"),
	HX_HCSTRING("set_int","\x92","\x66","\xc6","\x19"),
	HX_HCSTRING("get_dex","\x6e","\x02","\xc1","\x26"),
	HX_HCSTRING("set_dex","\x7a","\x93","\xc2","\x19"),
	HX_HCSTRING("get_vit","\x78","\xae","\xce","\x26"),
	HX_HCSTRING("set_vit","\x84","\x3f","\xd0","\x19"),
	HX_HCSTRING("get_will","\x9b","\x2a","\xb3","\xce"),
	HX_HCSTRING("set_will","\x0f","\x84","\x10","\x7d"),
	HX_HCSTRING("get_luck","\xfa","\xe4","\x76","\xc7"),
	HX_HCSTRING("set_luck","\x6e","\x3e","\xd4","\x75"),
	HX_HCSTRING("get_def","\x5c","\x02","\xc1","\x26"),
	HX_HCSTRING("set_def","\x68","\x93","\xc2","\x19"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

