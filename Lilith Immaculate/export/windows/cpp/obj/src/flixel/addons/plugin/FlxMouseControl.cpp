// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxExtendedSprite
#include <flixel/addons/display/FlxExtendedSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_plugin_FlxMouseControl
#include <flixel/addons/plugin/FlxMouseControl.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

namespace flixel{
namespace addons{
namespace plugin{

void FlxMouseControl_obj::__construct(){
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","new",0x08bbf8ea,"flixel.addons.plugin.FlxMouseControl.new","flixel/addons/plugin/FlxMouseControl.hx",17,0x04dd2fe7)
            	HX_STACK_THIS(this)
HXLINE(  17)		super::__construct();
            	}

Dynamic FlxMouseControl_obj::__CreateEmpty() { return new FlxMouseControl_obj; }

hx::ObjectPtr< FlxMouseControl_obj > FlxMouseControl_obj::__new()
{
	hx::ObjectPtr< FlxMouseControl_obj > _hx_result = new FlxMouseControl_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FlxMouseControl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxMouseControl_obj > _hx_result = new FlxMouseControl_obj();
	_hx_result->__construct();
	return _hx_result;
}

void FlxMouseControl_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","update",0x7b5dcfbf,"flixel.addons.plugin.FlxMouseControl.update","flixel/addons/plugin/FlxMouseControl.hx",128,0x04dd2fe7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 130)		::flixel::addons::plugin::FlxMouseControl_obj::speedX = (::flixel::FlxG_obj::mouse->screenX - ::flixel::addons::plugin::FlxMouseControl_obj::_oldX);
HXLINE( 131)		::flixel::addons::plugin::FlxMouseControl_obj::speedY = (::flixel::FlxG_obj::mouse->screenY - ::flixel::addons::plugin::FlxMouseControl_obj::_oldY);
HXLINE( 133)		::flixel::addons::plugin::FlxMouseControl_obj::_oldX = ::flixel::FlxG_obj::mouse->screenX;
HXLINE( 134)		::flixel::addons::plugin::FlxMouseControl_obj::_oldY = ::flixel::FlxG_obj::mouse->screenY;
HXLINE( 137)		Bool _hx_tmp = ::flixel::addons::plugin::FlxMouseControl_obj::_hasClickTarget;
HXDLIN( 137)		if (_hx_tmp) {
HXLINE( 139)			HX_VARI(  ::flixel::input::mouse::FlxMouseButton,_this) = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 139)			Bool _hx_tmp1;
HXDLIN( 139)			if ((_this->current != (int)1)) {
HXLINE( 139)				_hx_tmp1 = (_this->current == (int)2);
            			}
            			else {
HXLINE( 139)				_hx_tmp1 = true;
            			}
HXDLIN( 139)			if (_hx_tmp1) {
HXLINE( 142)				Bool _hx_tmp2;
HXDLIN( 142)				Bool _hx_tmp3;
HXDLIN( 142)				if ((::flixel::addons::plugin::FlxMouseControl_obj::isDragging == false)) {
HXLINE( 142)					_hx_tmp3 = (::flixel::addons::plugin::FlxMouseControl_obj::clickTarget->draggable == true);
            				}
            				else {
HXLINE( 142)					_hx_tmp3 = false;
            				}
HXDLIN( 142)				if (_hx_tmp3) {
HXLINE( 142)					if ((::flixel::addons::plugin::FlxMouseControl_obj::_clickCoords->x == ::flixel::FlxG_obj::mouse->x)) {
HXLINE( 142)						_hx_tmp2 = (::flixel::addons::plugin::FlxMouseControl_obj::_clickCoords->y != ::flixel::FlxG_obj::mouse->y);
            					}
            					else {
HXLINE( 142)						_hx_tmp2 = true;
            					}
            				}
            				else {
HXLINE( 142)					_hx_tmp2 = false;
            				}
HXDLIN( 142)				if (_hx_tmp2) {
HXLINE( 145)					::flixel::addons::plugin::FlxMouseControl_obj::isDragging = true;
HXLINE( 147)					::flixel::addons::plugin::FlxMouseControl_obj::dragTarget = ::flixel::addons::plugin::FlxMouseControl_obj::clickTarget;
HXLINE( 149)					::flixel::addons::plugin::FlxMouseControl_obj::dragTarget->startDrag();
            				}
            			}
            			else {
HXLINE( 154)				this->releaseMouse();
            			}
HXLINE( 157)			Bool _hx_tmp4 = (::flixel::addons::plugin::FlxMouseControl_obj::linkToDeadZone == true);
HXDLIN( 157)			if (_hx_tmp4) {
HXLINE( 159)				Bool _hx_tmp5 = ::flixel::math::FlxMath_obj::mouseInFlxRect(false,::flixel::FlxG_obj::camera->deadzone);
HXDLIN( 159)				if ((_hx_tmp5 == false)) {
HXLINE( 161)					this->releaseMouse();
            				}
            			}
            			else {
HXLINE( 164)				Bool _hx_tmp6 = ::flixel::math::FlxMath_obj::mouseInFlxRect(true,::flixel::addons::plugin::FlxMouseControl_obj::mouseZone);
HXDLIN( 164)				if ((_hx_tmp6 == false)) {
HXLINE( 167)					this->releaseMouse();
            				}
            			}
            		}
            		else {
HXLINE( 174)			Bool _hx_tmp7;
HXDLIN( 174)			HX_VARI_NAME(  ::flixel::input::mouse::FlxMouseButton,_this1,"_this") = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 174)			Bool _hx_tmp8;
HXDLIN( 174)			if ((_this1->current != (int)1)) {
HXLINE( 174)				_hx_tmp8 = (_this1->current == (int)2);
            			}
            			else {
HXLINE( 174)				_hx_tmp8 = true;
            			}
HXDLIN( 174)			if (_hx_tmp8) {
HXLINE( 174)				_hx_tmp7 = (::flixel::addons::plugin::FlxMouseControl_obj::_clickStack->length > (int)0);
            			}
            			else {
HXLINE( 174)				_hx_tmp7 = false;
            			}
HXDLIN( 174)			if (_hx_tmp7) {
HXLINE( 176)				this->assignClickedSprite();
            			}
            		}
            	}


void FlxMouseControl_obj::releaseMouse(){
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","releaseMouse",0xc8ff2514,"flixel.addons.plugin.FlxMouseControl.releaseMouse","flixel/addons/plugin/FlxMouseControl.hx",185,0x04dd2fe7)
            	HX_STACK_THIS(this)
HXLINE( 187)		::flixel::addons::plugin::FlxMouseControl_obj::clickTarget->mouseReleasedHandler();
HXLINE( 189)		::flixel::addons::plugin::FlxMouseControl_obj::_hasClickTarget = false;
HXLINE( 190)		::flixel::addons::plugin::FlxMouseControl_obj::clickTarget = null();
HXLINE( 192)		::flixel::addons::plugin::FlxMouseControl_obj::isDragging = false;
HXLINE( 193)		::flixel::addons::plugin::FlxMouseControl_obj::dragTarget = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouseControl_obj,releaseMouse,(void))

void FlxMouseControl_obj::assignClickedSprite(){
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","assignClickedSprite",0x7c03b2e7,"flixel.addons.plugin.FlxMouseControl.assignClickedSprite","flixel/addons/plugin/FlxMouseControl.hx",200,0x04dd2fe7)
            	HX_STACK_THIS(this)
HXLINE( 202)		Bool _hx_tmp = (::flixel::addons::plugin::FlxMouseControl_obj::_clickStack->length > (int)1);
HXDLIN( 202)		if (_hx_tmp) {
HXLINE( 204)			::flixel::addons::plugin::FlxMouseControl_obj::_clickStack->sort(this->sortHandler_dyn());
            		}
HXLINE( 207)		::flixel::addons::plugin::FlxMouseControl_obj::clickTarget = ::flixel::addons::plugin::FlxMouseControl_obj::_clickStack->pop().StaticCast<  ::flixel::addons::display::FlxExtendedSprite >();
HXLINE( 209)		::flixel::addons::plugin::FlxMouseControl_obj::_clickCoords = ::flixel::addons::plugin::FlxMouseControl_obj::clickTarget->_point;
HXLINE( 211)		::flixel::addons::plugin::FlxMouseControl_obj::_hasClickTarget = true;
HXLINE( 213)		::flixel::addons::plugin::FlxMouseControl_obj::clickTarget->mousePressedHandler();
HXLINE( 215)		::flixel::addons::plugin::FlxMouseControl_obj::_clickStack = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouseControl_obj,assignClickedSprite,(void))

Int FlxMouseControl_obj::sortHandler( ::flixel::addons::display::FlxExtendedSprite Item1, ::flixel::addons::display::FlxExtendedSprite Item2){
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","sortHandler",0x50aa3a96,"flixel.addons.plugin.FlxMouseControl.sortHandler","flixel/addons/plugin/FlxMouseControl.hx",227,0x04dd2fe7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Item1,"Item1")
            	HX_STACK_ARG(Item2,"Item2")
HXLINE( 228)		HX_VARI( Int,prop1) = ( (Int)(::Reflect_obj::getProperty(Item1,::flixel::addons::plugin::FlxMouseControl_obj::sortIndex)) );
HXLINE( 229)		HX_VARI( Int,prop2) = ( (Int)(::Reflect_obj::getProperty(Item2,::flixel::addons::plugin::FlxMouseControl_obj::sortIndex)) );
HXLINE( 231)		if ((prop1 < prop2)) {
HXLINE( 233)			return ::flixel::addons::plugin::FlxMouseControl_obj::sortOrder;
            		}
            		else {
HXLINE( 235)			if ((prop1 > prop2)) {
HXLINE( 237)				return -(::flixel::addons::plugin::FlxMouseControl_obj::sortOrder);
            			}
            		}
HXLINE( 240)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxMouseControl_obj,sortHandler,return )

void FlxMouseControl_obj::destroy(){
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","destroy",0xfd6e6284,"flixel.addons.plugin.FlxMouseControl.destroy","flixel/addons/plugin/FlxMouseControl.hx",248,0x04dd2fe7)
            	HX_STACK_THIS(this)
HXLINE( 248)		::flixel::addons::plugin::FlxMouseControl_obj::clear();
            	}


Int FlxMouseControl_obj::ASCENDING;

Int FlxMouseControl_obj::DESCENDING;

::String FlxMouseControl_obj::sortIndex;

Int FlxMouseControl_obj::sortOrder;

Bool FlxMouseControl_obj::isDragging;

 ::flixel::addons::display::FlxExtendedSprite FlxMouseControl_obj::dragTarget;

 ::flixel::addons::display::FlxExtendedSprite FlxMouseControl_obj::clickTarget;

Int FlxMouseControl_obj::speedX;

Int FlxMouseControl_obj::speedY;

 ::flixel::math::FlxRect FlxMouseControl_obj::mouseZone;

Bool FlxMouseControl_obj::linkToDeadZone;

::Array< ::Dynamic> FlxMouseControl_obj::_clickStack;

 ::flixel::math::FlxPoint FlxMouseControl_obj::_clickCoords;

Bool FlxMouseControl_obj::_hasClickTarget;

Int FlxMouseControl_obj::_oldX;

Int FlxMouseControl_obj::_oldY;

void FlxMouseControl_obj::addToStack( ::flixel::addons::display::FlxExtendedSprite Item){
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","addToStack",0xc3b83c62,"flixel.addons.plugin.FlxMouseControl.addToStack","flixel/addons/plugin/FlxMouseControl.hx",83,0x04dd2fe7)
            	HX_STACK_ARG(Item,"Item")
HXLINE(  83)		Bool _hx_tmp = hx::IsNotNull( ::flixel::addons::plugin::FlxMouseControl_obj::mouseZone );
HXDLIN(  83)		if (_hx_tmp) {
HXLINE(  85)			Int _hx_tmp1 = ::Math_obj::floor(::flixel::FlxG_obj::mouse->x);
HXDLIN(  85)			Int _hx_tmp2 = ::Math_obj::floor(::flixel::FlxG_obj::mouse->y);
HXDLIN(  85)			if ((::flixel::math::FlxMath_obj::pointInFlxRect(_hx_tmp1,_hx_tmp2,::flixel::addons::plugin::FlxMouseControl_obj::mouseZone) == true)) {
HXLINE(  87)				::flixel::addons::plugin::FlxMouseControl_obj::_clickStack->push(Item);
            			}
            		}
            		else {
HXLINE(  92)			::flixel::addons::plugin::FlxMouseControl_obj::_clickStack->push(Item);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxMouseControl_obj,addToStack,(void))

void FlxMouseControl_obj::clear(){
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","clear",0x59865097,"flixel.addons.plugin.FlxMouseControl.clear","flixel/addons/plugin/FlxMouseControl.hx",100,0x04dd2fe7)
HXLINE( 101)		::flixel::addons::plugin::FlxMouseControl_obj::_hasClickTarget = false;
HXLINE( 103)		Bool _hx_tmp = hx::IsNotNull( ::flixel::addons::plugin::FlxMouseControl_obj::clickTarget );
HXDLIN( 103)		if (_hx_tmp) {
HXLINE( 105)			::flixel::addons::plugin::FlxMouseControl_obj::clickTarget->mouseReleasedHandler();
            		}
HXLINE( 108)		::flixel::addons::plugin::FlxMouseControl_obj::clickTarget = null();
HXLINE( 110)		::flixel::addons::plugin::FlxMouseControl_obj::isDragging = false;
HXLINE( 112)		Bool _hx_tmp1 = hx::IsNotNull( ::flixel::addons::plugin::FlxMouseControl_obj::dragTarget );
HXDLIN( 112)		if (_hx_tmp1) {
HXLINE( 114)			::flixel::addons::plugin::FlxMouseControl_obj::dragTarget->stopDrag();
            		}
HXLINE( 117)		::flixel::addons::plugin::FlxMouseControl_obj::speedX = (int)0;
HXLINE( 118)		::flixel::addons::plugin::FlxMouseControl_obj::speedY = (int)0;
HXLINE( 119)		::flixel::addons::plugin::FlxMouseControl_obj::dragTarget = null();
HXLINE( 120)		::flixel::addons::plugin::FlxMouseControl_obj::mouseZone = null();
HXLINE( 121)		::flixel::addons::plugin::FlxMouseControl_obj::linkToDeadZone = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxMouseControl_obj,clear,(void))


FlxMouseControl_obj::FlxMouseControl_obj()
{
}

hx::Val FlxMouseControl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sortHandler") ) { return hx::Val( sortHandler_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"releaseMouse") ) { return hx::Val( releaseMouse_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"assignClickedSprite") ) { return hx::Val( assignClickedSprite_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxMouseControl_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_oldX") ) { outValue = _oldX; return true; }
		if (HX_FIELD_EQ(inName,"_oldY") ) { outValue = _oldY; return true; }
		if (HX_FIELD_EQ(inName,"clear") ) { outValue = clear_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"speedX") ) { outValue = speedX; return true; }
		if (HX_FIELD_EQ(inName,"speedY") ) { outValue = speedY; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sortIndex") ) { outValue = sortIndex; return true; }
		if (HX_FIELD_EQ(inName,"sortOrder") ) { outValue = sortOrder; return true; }
		if (HX_FIELD_EQ(inName,"mouseZone") ) { outValue = mouseZone; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isDragging") ) { outValue = isDragging; return true; }
		if (HX_FIELD_EQ(inName,"dragTarget") ) { outValue = dragTarget; return true; }
		if (HX_FIELD_EQ(inName,"addToStack") ) { outValue = addToStack_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clickTarget") ) { outValue = clickTarget; return true; }
		if (HX_FIELD_EQ(inName,"_clickStack") ) { outValue = _clickStack; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_clickCoords") ) { outValue = _clickCoords; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"linkToDeadZone") ) { outValue = linkToDeadZone; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_hasClickTarget") ) { outValue = _hasClickTarget; return true; }
	}
	return false;
}

bool FlxMouseControl_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_oldX") ) { _oldX=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"_oldY") ) { _oldY=ioValue.Cast< Int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"speedX") ) { speedX=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"speedY") ) { speedY=ioValue.Cast< Int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sortIndex") ) { sortIndex=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"sortOrder") ) { sortOrder=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseZone") ) { mouseZone=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isDragging") ) { isDragging=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"dragTarget") ) { dragTarget=ioValue.Cast<  ::flixel::addons::display::FlxExtendedSprite >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clickTarget") ) { clickTarget=ioValue.Cast<  ::flixel::addons::display::FlxExtendedSprite >(); return true; }
		if (HX_FIELD_EQ(inName,"_clickStack") ) { _clickStack=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_clickCoords") ) { _clickCoords=ioValue.Cast<  ::flixel::math::FlxPoint >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"linkToDeadZone") ) { linkToDeadZone=ioValue.Cast< Bool >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_hasClickTarget") ) { _hasClickTarget=ioValue.Cast< Bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxMouseControl_obj_sMemberStorageInfo = 0;
static hx::StaticInfo FlxMouseControl_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxMouseControl_obj::ASCENDING,HX_HCSTRING("ASCENDING","\xb8","\x0d","\xd0","\xa9")},
	{hx::fsInt,(void *) &FlxMouseControl_obj::DESCENDING,HX_HCSTRING("DESCENDING","\xf8","\x88","\x5d","\x09")},
	{hx::fsString,(void *) &FlxMouseControl_obj::sortIndex,HX_HCSTRING("sortIndex","\xd4","\x6e","\x88","\xc6")},
	{hx::fsInt,(void *) &FlxMouseControl_obj::sortOrder,HX_HCSTRING("sortOrder","\x50","\xc4","\x94","\x3d")},
	{hx::fsBool,(void *) &FlxMouseControl_obj::isDragging,HX_HCSTRING("isDragging","\xd9","\x4e","\x3b","\xb2")},
	{hx::fsObject /*::flixel::addons::display::FlxExtendedSprite*/ ,(void *) &FlxMouseControl_obj::dragTarget,HX_HCSTRING("dragTarget","\x65","\x02","\x59","\x2f")},
	{hx::fsObject /*::flixel::addons::display::FlxExtendedSprite*/ ,(void *) &FlxMouseControl_obj::clickTarget,HX_HCSTRING("clickTarget","\xb9","\x49","\xee","\xb5")},
	{hx::fsInt,(void *) &FlxMouseControl_obj::speedX,HX_HCSTRING("speedX","\xf1","\xfe","\xfa","\xba")},
	{hx::fsInt,(void *) &FlxMouseControl_obj::speedY,HX_HCSTRING("speedY","\xf2","\xfe","\xfa","\xba")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(void *) &FlxMouseControl_obj::mouseZone,HX_HCSTRING("mouseZone","\xf1","\x5a","\x4d","\xfd")},
	{hx::fsBool,(void *) &FlxMouseControl_obj::linkToDeadZone,HX_HCSTRING("linkToDeadZone","\x25","\x6c","\x46","\x9b")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &FlxMouseControl_obj::_clickStack,HX_HCSTRING("_clickStack","\xff","\xa2","\x14","\x97")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(void *) &FlxMouseControl_obj::_clickCoords,HX_HCSTRING("_clickCoords","\x87","\xa8","\x8f","\x5d")},
	{hx::fsBool,(void *) &FlxMouseControl_obj::_hasClickTarget,HX_HCSTRING("_hasClickTarget","\x1e","\xd5","\xd8","\xf0")},
	{hx::fsInt,(void *) &FlxMouseControl_obj::_oldX,HX_HCSTRING("_oldX","\xb0","\x15","\xc2","\xfc")},
	{hx::fsInt,(void *) &FlxMouseControl_obj::_oldY,HX_HCSTRING("_oldY","\xb1","\x15","\xc2","\xfc")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxMouseControl_obj_sMemberFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("releaseMouse","\xde","\xae","\x87","\xd3"),
	HX_HCSTRING("assignClickedSprite","\x5d","\x56","\x5c","\x73"),
	HX_HCSTRING("sortHandler","\x0c","\x78","\xb7","\x31"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void FlxMouseControl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::ASCENDING,"ASCENDING");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::DESCENDING,"DESCENDING");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::sortIndex,"sortIndex");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::sortOrder,"sortOrder");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::isDragging,"isDragging");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::dragTarget,"dragTarget");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::clickTarget,"clickTarget");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::speedX,"speedX");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::speedY,"speedY");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::mouseZone,"mouseZone");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::linkToDeadZone,"linkToDeadZone");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::_clickStack,"_clickStack");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::_clickCoords,"_clickCoords");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::_hasClickTarget,"_hasClickTarget");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::_oldX,"_oldX");
	HX_MARK_MEMBER_NAME(FlxMouseControl_obj::_oldY,"_oldY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxMouseControl_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::ASCENDING,"ASCENDING");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::DESCENDING,"DESCENDING");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::sortIndex,"sortIndex");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::sortOrder,"sortOrder");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::isDragging,"isDragging");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::dragTarget,"dragTarget");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::clickTarget,"clickTarget");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::speedX,"speedX");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::speedY,"speedY");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::mouseZone,"mouseZone");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::linkToDeadZone,"linkToDeadZone");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::_clickStack,"_clickStack");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::_clickCoords,"_clickCoords");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::_hasClickTarget,"_hasClickTarget");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::_oldX,"_oldX");
	HX_VISIT_MEMBER_NAME(FlxMouseControl_obj::_oldY,"_oldY");
};

#endif

hx::Class FlxMouseControl_obj::__mClass;

static ::String FlxMouseControl_obj_sStaticFields[] = {
	HX_HCSTRING("ASCENDING","\xb8","\x0d","\xd0","\xa9"),
	HX_HCSTRING("DESCENDING","\xf8","\x88","\x5d","\x09"),
	HX_HCSTRING("sortIndex","\xd4","\x6e","\x88","\xc6"),
	HX_HCSTRING("sortOrder","\x50","\xc4","\x94","\x3d"),
	HX_HCSTRING("isDragging","\xd9","\x4e","\x3b","\xb2"),
	HX_HCSTRING("dragTarget","\x65","\x02","\x59","\x2f"),
	HX_HCSTRING("clickTarget","\xb9","\x49","\xee","\xb5"),
	HX_HCSTRING("speedX","\xf1","\xfe","\xfa","\xba"),
	HX_HCSTRING("speedY","\xf2","\xfe","\xfa","\xba"),
	HX_HCSTRING("mouseZone","\xf1","\x5a","\x4d","\xfd"),
	HX_HCSTRING("linkToDeadZone","\x25","\x6c","\x46","\x9b"),
	HX_HCSTRING("_clickStack","\xff","\xa2","\x14","\x97"),
	HX_HCSTRING("_clickCoords","\x87","\xa8","\x8f","\x5d"),
	HX_HCSTRING("_hasClickTarget","\x1e","\xd5","\xd8","\xf0"),
	HX_HCSTRING("_oldX","\xb0","\x15","\xc2","\xfc"),
	HX_HCSTRING("_oldY","\xb1","\x15","\xc2","\xfc"),
	HX_HCSTRING("addToStack","\xac","\xdf","\x19","\xb8"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	::String(null())
};

void FlxMouseControl_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.plugin.FlxMouseControl","\xf8","\xfb","\x06","\x10");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxMouseControl_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxMouseControl_obj::__SetStatic;
	__mClass->mMarkFunc = FlxMouseControl_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxMouseControl_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxMouseControl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxMouseControl_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxMouseControl_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxMouseControl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxMouseControl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxMouseControl_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","boot",0x93d6d468,"flixel.addons.plugin.FlxMouseControl.boot","flixel/addons/plugin/FlxMouseControl.hx",22,0x04dd2fe7)
HXLINE(  22)		ASCENDING = (int)-1;
            	}
{
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","boot",0x93d6d468,"flixel.addons.plugin.FlxMouseControl.boot","flixel/addons/plugin/FlxMouseControl.hx",26,0x04dd2fe7)
HXLINE(  26)		DESCENDING = (int)1;
            	}
{
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","boot",0x93d6d468,"flixel.addons.plugin.FlxMouseControl.boot","flixel/addons/plugin/FlxMouseControl.hx",30,0x04dd2fe7)
HXLINE(  30)		sortIndex = HX_("y",79,00,00,00);
            	}
{
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","boot",0x93d6d468,"flixel.addons.plugin.FlxMouseControl.boot","flixel/addons/plugin/FlxMouseControl.hx",34,0x04dd2fe7)
HXLINE(  34)		sortOrder = (int)-1;
            	}
{
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","boot",0x93d6d468,"flixel.addons.plugin.FlxMouseControl.boot","flixel/addons/plugin/FlxMouseControl.hx",38,0x04dd2fe7)
HXLINE(  38)		isDragging = false;
            	}
{
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","boot",0x93d6d468,"flixel.addons.plugin.FlxMouseControl.boot","flixel/addons/plugin/FlxMouseControl.hx",64,0x04dd2fe7)
HXLINE(  64)		linkToDeadZone = false;
            	}
{
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","boot",0x93d6d468,"flixel.addons.plugin.FlxMouseControl.boot","flixel/addons/plugin/FlxMouseControl.hx",69,0x04dd2fe7)
HXLINE(  69)		_clickStack = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","boot",0x93d6d468,"flixel.addons.plugin.FlxMouseControl.boot","flixel/addons/plugin/FlxMouseControl.hx",71,0x04dd2fe7)
HXLINE(  71)		_hasClickTarget = false;
            	}
{
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","boot",0x93d6d468,"flixel.addons.plugin.FlxMouseControl.boot","flixel/addons/plugin/FlxMouseControl.hx",73,0x04dd2fe7)
HXLINE(  73)		_oldX = (int)0;
            	}
{
            	HX_STACK_FRAME("flixel.addons.plugin.FlxMouseControl","boot",0x93d6d468,"flixel.addons.plugin.FlxMouseControl.boot","flixel/addons/plugin/FlxMouseControl.hx",74,0x04dd2fe7)
HXLINE(  74)		_oldY = (int)0;
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace plugin
