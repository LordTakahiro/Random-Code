// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxExtendedSprite
#include <flixel/addons/display/FlxExtendedSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxMouseSpring
#include <flixel/addons/display/FlxMouseSpring.h>
#endif
#ifndef INCLUDED_flixel_addons_plugin_FlxMouseControl
#include <flixel/addons/plugin/FlxMouseControl.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_PluginFrontEnd
#include <flixel/system/frontEnds/PluginFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxCollision
#include <flixel/util/FlxCollision.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

namespace flixel{
namespace addons{
namespace display{

void FlxExtendedSprite_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","new",0x1ee235ed,"flixel.addons.display.FlxExtendedSprite.new","flixel/addons/display/FlxExtendedSprite.hx",18,0xe2826ec4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(SimpleGraphic,"SimpleGraphic")
HXLINE( 177)		this->_allowVerticalDrag = true;
HXLINE( 176)		this->_allowHorizontalDrag = true;
HXLINE( 166)		this->_clickCounter = (int)0;
HXLINE( 164)		this->_clickPixelPerfect = false;
HXLINE( 163)		this->_clickOnRelease = false;
HXLINE( 159)		this->_snapOnRelease = false;
HXLINE( 158)		this->_snapOnDrag = false;
HXLINE( 117)		this->hasMouseSpring = false;
HXLINE(  83)		this->springOnPressed = true;
HXLINE(  79)		this->draggable = false;
HXLINE(  75)		this->isDragged = false;
HXLINE(  47)		this->hasGravity = false;
HXLINE(  35)		this->throwable = false;
HXLINE(  31)		this->clickable = false;
HXLINE(  27)		this->isPressed = false;
HXLINE( 189)		super::__construct(X,Y,SimpleGraphic);
            	}

Dynamic FlxExtendedSprite_obj::__CreateEmpty() { return new FlxExtendedSprite_obj; }

hx::ObjectPtr< FlxExtendedSprite_obj > FlxExtendedSprite_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic)
{
	hx::ObjectPtr< FlxExtendedSprite_obj > _hx_result = new FlxExtendedSprite_obj();
	_hx_result->__construct(__o_X,__o_Y,SimpleGraphic);
	return _hx_result;
}

Dynamic FlxExtendedSprite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxExtendedSprite_obj > _hx_result = new FlxExtendedSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void FlxExtendedSprite_obj::enableMouseClicks(Bool OnRelease,hx::Null< Bool >  __o_PixelPerfect,hx::Null< Int >  __o_AlphaThreshold){
Bool PixelPerfect = __o_PixelPerfect.Default(false);
Int AlphaThreshold = __o_AlphaThreshold.Default(255);
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","enableMouseClicks",0x0c055bba,"flixel.addons.display.FlxExtendedSprite.enableMouseClicks","flixel/addons/display/FlxExtendedSprite.hx",202,0xe2826ec4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(OnRelease,"OnRelease")
            	HX_STACK_ARG(PixelPerfect,"PixelPerfect")
            	HX_STACK_ARG(AlphaThreshold,"AlphaThreshold")
HXLINE( 203)		 ::flixel::FlxBasic _hx_tmp = ::flixel::FlxG_obj::plugins->get(hx::ClassOf< ::flixel::addons::plugin::FlxMouseControl >());
HXDLIN( 203)		Bool _hx_tmp1 = hx::IsNull( _hx_tmp );
HXDLIN( 203)		if (_hx_tmp1) {
HXLINE( 205)			HX_STACK_DO_THROW(HX_("FlxExtendedSprite.enableMouseClicks called but FlxMouseControl plugin not activated",be,48,74,ba));
            		}
HXLINE( 208)		this->clickable = true;
HXLINE( 210)		this->_clickOnRelease = OnRelease;
HXLINE( 211)		this->_clickPixelPerfect = PixelPerfect;
HXLINE( 212)		this->_clickPixelPerfectAlpha = AlphaThreshold;
HXLINE( 213)		this->_clickCounter = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxExtendedSprite_obj,enableMouseClicks,(void))

void FlxExtendedSprite_obj::disableMouseClicks(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","disableMouseClicks",0xc2147f3b,"flixel.addons.display.FlxExtendedSprite.disableMouseClicks","flixel/addons/display/FlxExtendedSprite.hx",220,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 221)		this->clickable = false;
HXLINE( 222)		this->mousePressedCallback = null();
HXLINE( 223)		this->mouseReleasedCallback = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,disableMouseClicks,(void))

void FlxExtendedSprite_obj::enableMouseDrag(hx::Null< Bool >  __o_LockCenter,hx::Null< Bool >  __o_PixelPerfect,hx::Null< Int >  __o_AlphaThreshold, ::flixel::math::FlxRect BoundsRect, ::flixel::FlxSprite BoundsSprite){
Bool LockCenter = __o_LockCenter.Default(false);
Bool PixelPerfect = __o_PixelPerfect.Default(false);
Int AlphaThreshold = __o_AlphaThreshold.Default(255);
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","enableMouseDrag",0xeadcb2c3,"flixel.addons.display.FlxExtendedSprite.enableMouseDrag","flixel/addons/display/FlxExtendedSprite.hx",236,0xe2826ec4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(LockCenter,"LockCenter")
            	HX_STACK_ARG(PixelPerfect,"PixelPerfect")
            	HX_STACK_ARG(AlphaThreshold,"AlphaThreshold")
            	HX_STACK_ARG(BoundsRect,"BoundsRect")
            	HX_STACK_ARG(BoundsSprite,"BoundsSprite")
HXLINE( 237)		 ::flixel::FlxBasic _hx_tmp = ::flixel::FlxG_obj::plugins->get(hx::ClassOf< ::flixel::addons::plugin::FlxMouseControl >());
HXDLIN( 237)		Bool _hx_tmp1 = hx::IsNull( _hx_tmp );
HXDLIN( 237)		if (_hx_tmp1) {
HXLINE( 239)			HX_STACK_DO_THROW(HX_("FlxExtendedSprite.enableMouseDrag called but FlxMouseControl plugin not activated",87,56,a5,38));
            		}
HXLINE( 242)		this->draggable = true;
HXLINE( 244)		this->_dragFromPoint = LockCenter;
HXLINE( 245)		this->_dragPixelPerfect = PixelPerfect;
HXLINE( 246)		this->_dragPixelPerfectAlpha = AlphaThreshold;
HXLINE( 248)		Bool _hx_tmp2 = hx::IsNotNull( BoundsRect );
HXDLIN( 248)		if (_hx_tmp2) {
HXLINE( 250)			this->boundsRect = BoundsRect;
            		}
HXLINE( 253)		Bool _hx_tmp3 = hx::IsNotNull( BoundsSprite );
HXDLIN( 253)		if (_hx_tmp3) {
HXLINE( 255)			this->boundsSprite = BoundsSprite;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxExtendedSprite_obj,enableMouseDrag,(void))

void FlxExtendedSprite_obj::disableMouseDrag(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","disableMouseDrag",0xbef44404,"flixel.addons.display.FlxExtendedSprite.disableMouseDrag","flixel/addons/display/FlxExtendedSprite.hx",264,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 265)		Bool _hx_tmp = this->isDragged;
HXDLIN( 265)		if (_hx_tmp) {
HXLINE( 267)			::flixel::addons::plugin::FlxMouseControl_obj::dragTarget = null();
HXLINE( 268)			::flixel::addons::plugin::FlxMouseControl_obj::isDragging = false;
            		}
HXLINE( 271)		this->isDragged = false;
HXLINE( 272)		this->draggable = false;
HXLINE( 274)		this->mouseStartDragCallback = null();
HXLINE( 275)		this->mouseStopDragCallback = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,disableMouseDrag,(void))

void FlxExtendedSprite_obj::enableMouseThrow(Int FactorX,Int FactorY){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","enableMouseThrow",0xc619cb77,"flixel.addons.display.FlxExtendedSprite.enableMouseThrow","flixel/addons/display/FlxExtendedSprite.hx",285,0xe2826ec4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(FactorX,"FactorX")
            	HX_STACK_ARG(FactorY,"FactorY")
HXLINE( 286)		 ::flixel::FlxBasic _hx_tmp = ::flixel::FlxG_obj::plugins->get(hx::ClassOf< ::flixel::addons::plugin::FlxMouseControl >());
HXDLIN( 286)		Bool _hx_tmp1 = hx::IsNull( _hx_tmp );
HXDLIN( 286)		if (_hx_tmp1) {
HXLINE( 288)			HX_STACK_DO_THROW(HX_("FlxExtendedSprite.enableMouseThrow called but FlxMouseControl plugin not activated",71,fd,98,01));
            		}
HXLINE( 291)		this->throwable = true;
HXLINE( 292)		this->_throwXFactor = FactorX;
HXLINE( 293)		this->_throwYFactor = FactorY;
HXLINE( 295)		Bool _hx_tmp2;
HXDLIN( 295)		if ((this->clickable == false)) {
HXLINE( 295)			_hx_tmp2 = (this->draggable == false);
            		}
            		else {
HXLINE( 295)			_hx_tmp2 = false;
            		}
HXDLIN( 295)		if (_hx_tmp2) {
HXLINE( 297)			this->clickable = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxExtendedSprite_obj,enableMouseThrow,(void))

void FlxExtendedSprite_obj::disableMouseThrow(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","disableMouseThrow",0x86a15316,"flixel.addons.display.FlxExtendedSprite.disableMouseThrow","flixel/addons/display/FlxExtendedSprite.hx",306,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 306)		this->throwable = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,disableMouseThrow,(void))

void FlxExtendedSprite_obj::enableMouseSnap(Int SnapX,Int SnapY,hx::Null< Bool >  __o_OnDrag,hx::Null< Bool >  __o_OnRelease){
Bool OnDrag = __o_OnDrag.Default(true);
Bool OnRelease = __o_OnRelease.Default(false);
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","enableMouseSnap",0xf4c3dd19,"flixel.addons.display.FlxExtendedSprite.enableMouseSnap","flixel/addons/display/FlxExtendedSprite.hx",319,0xe2826ec4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(SnapX,"SnapX")
            	HX_STACK_ARG(SnapY,"SnapY")
            	HX_STACK_ARG(OnDrag,"OnDrag")
            	HX_STACK_ARG(OnRelease,"OnRelease")
HXLINE( 320)		this->_snapOnDrag = OnDrag;
HXLINE( 321)		this->_snapOnRelease = OnRelease;
HXLINE( 322)		this->_snapX = SnapX;
HXLINE( 323)		this->_snapY = SnapY;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxExtendedSprite_obj,enableMouseSnap,(void))

void FlxExtendedSprite_obj::disableMouseSnap(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","disableMouseSnap",0xc8db6e5a,"flixel.addons.display.FlxExtendedSprite.disableMouseSnap","flixel/addons/display/FlxExtendedSprite.hx",330,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 331)		this->_snapOnDrag = false;
HXLINE( 332)		this->_snapOnRelease = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,disableMouseSnap,(void))

 ::flixel::addons::display::FlxMouseSpring FlxExtendedSprite_obj::enableMouseSpring(hx::Null< Bool >  __o_OnPressed,hx::Null< Bool >  __o_RetainVelocity,hx::Null< Float >  __o_Tension,hx::Null< Float >  __o_Friction,hx::Null< Float >  __o_Gravity){
Bool OnPressed = __o_OnPressed.Default(true);
Bool RetainVelocity = __o_RetainVelocity.Default(false);
Float Tension = __o_Tension.Default(((Float)0.1));
Float Friction = __o_Friction.Default(((Float)0.95));
Float Gravity = __o_Gravity.Default(0);
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","enableMouseSpring",0xc54cef5c,"flixel.addons.display.FlxExtendedSprite.enableMouseSpring","flixel/addons/display/FlxExtendedSprite.hx",347,0xe2826ec4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(OnPressed,"OnPressed")
            	HX_STACK_ARG(RetainVelocity,"RetainVelocity")
            	HX_STACK_ARG(Tension,"Tension")
            	HX_STACK_ARG(Friction,"Friction")
            	HX_STACK_ARG(Gravity,"Gravity")
HXLINE( 348)		 ::flixel::FlxBasic _hx_tmp = ::flixel::FlxG_obj::plugins->get(hx::ClassOf< ::flixel::addons::plugin::FlxMouseControl >());
HXDLIN( 348)		Bool _hx_tmp1 = hx::IsNull( _hx_tmp );
HXDLIN( 348)		if (_hx_tmp1) {
HXLINE( 350)			HX_STACK_DO_THROW(HX_("FlxExtendedSprite.enableMouseSpring called but FlxMouseControl plugin not activated",60,88,76,12));
            		}
HXLINE( 353)		this->hasMouseSpring = true;
HXLINE( 354)		this->springOnPressed = OnPressed;
HXLINE( 356)		Bool _hx_tmp2 = hx::IsNull( this->mouseSpring );
HXDLIN( 356)		if (_hx_tmp2) {
HXLINE( 358)			this->mouseSpring =  ::flixel::addons::display::FlxMouseSpring_obj::__new(hx::ObjectPtr<OBJ_>(this),RetainVelocity,Tension,Friction,Gravity);
            		}
            		else {
HXLINE( 362)			this->mouseSpring->tension = Tension;
HXLINE( 363)			this->mouseSpring->friction = Friction;
HXLINE( 364)			this->mouseSpring->gravity = Gravity;
            		}
HXLINE( 367)		Bool _hx_tmp3;
HXDLIN( 367)		if ((this->clickable == false)) {
HXLINE( 367)			_hx_tmp3 = (this->draggable == false);
            		}
            		else {
HXLINE( 367)			_hx_tmp3 = false;
            		}
HXDLIN( 367)		if (_hx_tmp3) {
HXLINE( 369)			this->clickable = true;
            		}
HXLINE( 372)		return this->mouseSpring;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxExtendedSprite_obj,enableMouseSpring,return )

void FlxExtendedSprite_obj::disableMouseSpring(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","disableMouseSpring",0x7b5c12dd,"flixel.addons.display.FlxExtendedSprite.disableMouseSpring","flixel/addons/display/FlxExtendedSprite.hx",379,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 380)		this->hasMouseSpring = false;
HXLINE( 381)		this->mouseSpring = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,disableMouseSpring,(void))

void FlxExtendedSprite_obj::setDragLock(hx::Null< Bool >  __o_AllowHorizontalDrag,hx::Null< Bool >  __o_AllowVerticalDrag){
Bool AllowHorizontalDrag = __o_AllowHorizontalDrag.Default(true);
Bool AllowVerticalDrag = __o_AllowVerticalDrag.Default(true);
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","setDragLock",0x200b024e,"flixel.addons.display.FlxExtendedSprite.setDragLock","flixel/addons/display/FlxExtendedSprite.hx",392,0xe2826ec4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(AllowHorizontalDrag,"AllowHorizontalDrag")
            	HX_STACK_ARG(AllowVerticalDrag,"AllowVerticalDrag")
HXLINE( 393)		this->_allowHorizontalDrag = AllowHorizontalDrag;
HXLINE( 394)		this->_allowVerticalDrag = AllowVerticalDrag;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxExtendedSprite_obj,setDragLock,(void))

void FlxExtendedSprite_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","update",0x94f7569c,"flixel.addons.display.FlxExtendedSprite.update","flixel/addons/display/FlxExtendedSprite.hx",401,0xe2826ec4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 403)		Bool _hx_tmp;
HXDLIN( 403)		if ((this->draggable == true)) {
HXLINE( 403)			_hx_tmp = (this->isDragged == true);
            		}
            		else {
HXLINE( 403)			_hx_tmp = false;
            		}
HXDLIN( 403)		if (_hx_tmp) {
HXLINE( 405)			this->updateDrag();
            		}
HXLINE( 408)		Bool _hx_tmp1;
HXDLIN( 408)		if ((this->isPressed == false)) {
HXLINE( 408)			_hx_tmp1 = (::flixel::FlxG_obj::mouse->_leftButton->current == (int)2);
            		}
            		else {
HXLINE( 408)			_hx_tmp1 = false;
            		}
HXDLIN( 408)		if (_hx_tmp1) {
HXLINE( 410)			this->checkForClick();
            		}
HXLINE( 413)		Bool _hx_tmp2 = (this->hasGravity == true);
HXDLIN( 413)		if (_hx_tmp2) {
HXLINE( 415)			this->updateGravity();
            		}
HXLINE( 418)		Bool _hx_tmp3 = (this->hasMouseSpring == true);
HXDLIN( 418)		if (_hx_tmp3) {
HXLINE( 420)			Bool _hx_tmp4 = (this->springOnPressed == false);
HXDLIN( 420)			if (_hx_tmp4) {
HXLINE( 422)				this->mouseSpring->update(elapsed);
            			}
            			else {
HXLINE( 426)				Bool _hx_tmp5 = (this->isPressed == true);
HXDLIN( 426)				if (_hx_tmp5) {
HXLINE( 428)					this->mouseSpring->update(elapsed);
            				}
            				else {
HXLINE( 432)					this->mouseSpring->reset();
            				}
            			}
            		}
HXLINE( 438)		this->super::update(elapsed);
            	}


void FlxExtendedSprite_obj::updateGravity(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","updateGravity",0x1a4d8b12,"flixel.addons.display.FlxExtendedSprite.updateGravity","flixel/addons/display/FlxExtendedSprite.hx",445,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 449)		Bool _hx_tmp = (this->velocity->x != (int)0);
HXDLIN( 449)		if (_hx_tmp) {
HXLINE( 451)			Bool _hx_tmp1 = (this->acceleration->x < (int)0);
HXDLIN( 451)			if (_hx_tmp1) {
HXLINE( 454)				Bool _hx_tmp2 = (((int)this->touching & (int)(int)17) != (int)0);
HXDLIN( 454)				if (_hx_tmp2) {
HXLINE( 456)					this->drag->set_y(this->frictionY);
HXLINE( 458)					Bool _hx_tmp3 = (((int)this->wasTouching & (int)(int)17) == (int)0);
HXDLIN( 458)					if (_hx_tmp3) {
HXLINE( 460)						Bool _hx_tmp4 = (this->velocity->x < this->toleranceX);
HXDLIN( 460)						if (_hx_tmp4) {
HXLINE( 462)							this->velocity->set_x((int)0);
            						}
            					}
            				}
            				else {
HXLINE( 468)					this->drag->set_y((int)0);
            				}
            			}
            			else {
HXLINE( 471)				Bool _hx_tmp5 = (this->acceleration->x > (int)0);
HXDLIN( 471)				if (_hx_tmp5) {
HXLINE( 474)					Bool _hx_tmp6 = (((int)this->touching & (int)(int)17) != (int)0);
HXDLIN( 474)					if (_hx_tmp6) {
HXLINE( 477)						this->drag->set_y(this->frictionY);
HXLINE( 479)						Bool _hx_tmp7 = (((int)this->wasTouching & (int)(int)17) == (int)0);
HXDLIN( 479)						if (_hx_tmp7) {
HXLINE( 481)							Bool _hx_tmp8 = (this->velocity->x > -(this->toleranceX));
HXDLIN( 481)							if (_hx_tmp8) {
HXLINE( 483)								this->velocity->set_x((int)0);
            							}
            						}
            					}
            					else {
HXLINE( 489)						this->drag->set_y((int)0);
            					}
            				}
            			}
            		}
HXLINE( 495)		Bool _hx_tmp9 = (this->velocity->y != (int)0);
HXDLIN( 495)		if (_hx_tmp9) {
HXLINE( 497)			Bool _hx_tmp10 = (this->acceleration->y < (int)0);
HXDLIN( 497)			if (_hx_tmp10) {
HXLINE( 500)				Bool _hx_tmp11 = (((int)this->touching & (int)(int)256) != (int)0);
HXDLIN( 500)				if (_hx_tmp11) {
HXLINE( 502)					this->drag->set_x(this->frictionX);
HXLINE( 504)					Bool _hx_tmp12 = (((int)this->wasTouching & (int)(int)256) == (int)0);
HXDLIN( 504)					if (_hx_tmp12) {
HXLINE( 506)						Bool _hx_tmp13 = (this->velocity->y < this->toleranceY);
HXDLIN( 506)						if (_hx_tmp13) {
HXLINE( 508)							this->velocity->set_y((int)0);
            						}
            					}
            				}
            				else {
HXLINE( 514)					this->drag->set_x((int)0);
            				}
            			}
            			else {
HXLINE( 517)				Bool _hx_tmp14 = (this->acceleration->y > (int)0);
HXDLIN( 517)				if (_hx_tmp14) {
HXLINE( 520)					Bool _hx_tmp15 = (((int)this->touching & (int)(int)4096) != (int)0);
HXDLIN( 520)					if (_hx_tmp15) {
HXLINE( 523)						this->drag->set_x(this->frictionX);
HXLINE( 525)						Bool _hx_tmp16 = (((int)this->wasTouching & (int)(int)4096) == (int)0);
HXDLIN( 525)						if (_hx_tmp16) {
HXLINE( 527)							Bool _hx_tmp17 = (this->velocity->y > -(this->toleranceY));
HXDLIN( 527)							if (_hx_tmp17) {
HXLINE( 529)								this->velocity->set_y((int)0);
            							}
            						}
            					}
            					else {
HXLINE( 535)						this->drag->set_x((int)0);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,updateGravity,(void))

void FlxExtendedSprite_obj::updateDrag(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","updateDrag",0x52262cb0,"flixel.addons.display.FlxExtendedSprite.updateDrag","flixel/addons/display/FlxExtendedSprite.hx",545,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 547)		Bool _hx_tmp = (this->_allowHorizontalDrag == true);
HXDLIN( 547)		if (_hx_tmp) {
HXLINE( 550)			Int _hx_tmp1 = ::flixel::FlxG_obj::mouse->screenX;
HXDLIN( 550)			Float _hx_tmp2 = (this->scrollFactor->x * (::flixel::FlxG_obj::mouse->x - ::flixel::FlxG_obj::mouse->screenX));
HXDLIN( 550)			Int _hx_tmp3 = ::Math_obj::floor((_hx_tmp1 + _hx_tmp2));
HXDLIN( 550)			Int _hx_tmp4 = (_hx_tmp3 - this->_dragOffsetX);
HXDLIN( 550)			this->set_x(_hx_tmp4);
            		}
HXLINE( 554)		Bool _hx_tmp5 = (this->_allowVerticalDrag == true);
HXDLIN( 554)		if (_hx_tmp5) {
HXLINE( 557)			Int _hx_tmp6 = ::flixel::FlxG_obj::mouse->screenY;
HXDLIN( 557)			Float _hx_tmp7 = (this->scrollFactor->y * (::flixel::FlxG_obj::mouse->y - ::flixel::FlxG_obj::mouse->screenY));
HXDLIN( 557)			Int _hx_tmp8 = ::Math_obj::floor((_hx_tmp6 + _hx_tmp7));
HXDLIN( 557)			Int _hx_tmp9 = (_hx_tmp8 - this->_dragOffsetY);
HXDLIN( 557)			this->set_y(_hx_tmp9);
            		}
HXLINE( 561)		Bool _hx_tmp10 = hx::IsNotNull( this->boundsRect );
HXDLIN( 561)		if (_hx_tmp10) {
HXLINE( 563)			this->checkBoundsRect();
            		}
HXLINE( 566)		Bool _hx_tmp11 = hx::IsNotNull( this->boundsSprite );
HXDLIN( 566)		if (_hx_tmp11) {
HXLINE( 568)			this->checkBoundsSprite();
            		}
HXLINE( 571)		Bool _hx_tmp12 = this->_snapOnDrag;
HXDLIN( 571)		if (_hx_tmp12) {
HXLINE( 573)			Float _hx_tmp13 = ((Float)this->x / (Float)this->_snapX);
HXDLIN( 573)			Int _hx_tmp14 = ::Math_obj::floor(_hx_tmp13);
HXDLIN( 573)			Int _hx_tmp15 = (_hx_tmp14 * this->_snapX);
HXDLIN( 573)			this->set_x(_hx_tmp15);
HXLINE( 574)			Float _hx_tmp16 = ((Float)this->y / (Float)this->_snapY);
HXDLIN( 574)			Int _hx_tmp17 = ::Math_obj::floor(_hx_tmp16);
HXDLIN( 574)			Int _hx_tmp18 = (_hx_tmp17 * this->_snapY);
HXDLIN( 574)			this->set_y(_hx_tmp18);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,updateDrag,(void))

void FlxExtendedSprite_obj::checkForClick(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","checkForClick",0x015d1934,"flixel.addons.display.FlxExtendedSprite.checkForClick","flixel/addons/display/FlxExtendedSprite.hx",585,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 585)		Bool _hx_tmp;
HXDLIN( 585)		Bool _hx_tmp1 = this->get_mouseOver();
HXDLIN( 585)		if (_hx_tmp1) {
HXLINE( 585)			_hx_tmp = (::flixel::FlxG_obj::mouse->_leftButton->current == (int)2);
            		}
            		else {
HXLINE( 585)			_hx_tmp = false;
            		}
HXDLIN( 585)		if (_hx_tmp) {
HXLINE( 588)			Bool _hx_tmp2;
HXDLIN( 588)			if ((this->_clickPixelPerfect == false)) {
HXLINE( 588)				_hx_tmp2 = (this->_dragPixelPerfect == false);
            			}
            			else {
HXLINE( 588)				_hx_tmp2 = false;
            			}
HXDLIN( 588)			if (_hx_tmp2) {
HXLINE( 590)				::flixel::addons::plugin::FlxMouseControl_obj::addToStack(hx::ObjectPtr<OBJ_>(this));
HXLINE( 591)				return;
            			}
HXLINE( 594)			Bool _hx_tmp3;
HXDLIN( 594)			Bool _hx_tmp4 = this->_clickPixelPerfect;
HXDLIN( 594)			if (_hx_tmp4) {
HXLINE( 594)				Int _hx_tmp5 = ::Math_obj::floor(::flixel::FlxG_obj::mouse->x);
HXDLIN( 594)				Int _hx_tmp6 = ::Math_obj::floor(::flixel::FlxG_obj::mouse->y);
HXDLIN( 594)				_hx_tmp3 = ::flixel::util::FlxCollision_obj::pixelPerfectPointCheck(_hx_tmp5,_hx_tmp6,hx::ObjectPtr<OBJ_>(this),this->_clickPixelPerfectAlpha);
            			}
            			else {
HXLINE( 594)				_hx_tmp3 = false;
            			}
HXDLIN( 594)			if (_hx_tmp3) {
HXLINE( 596)				::flixel::addons::plugin::FlxMouseControl_obj::addToStack(hx::ObjectPtr<OBJ_>(this));
HXLINE( 597)				return;
            			}
HXLINE( 600)			Bool _hx_tmp7;
HXDLIN( 600)			Bool _hx_tmp8 = this->_dragPixelPerfect;
HXDLIN( 600)			if (_hx_tmp8) {
HXLINE( 600)				Int _hx_tmp9 = ::Math_obj::floor(::flixel::FlxG_obj::mouse->x);
HXDLIN( 600)				Int _hx_tmp10 = ::Math_obj::floor(::flixel::FlxG_obj::mouse->y);
HXDLIN( 600)				_hx_tmp7 = ::flixel::util::FlxCollision_obj::pixelPerfectPointCheck(_hx_tmp9,_hx_tmp10,hx::ObjectPtr<OBJ_>(this),this->_dragPixelPerfectAlpha);
            			}
            			else {
HXLINE( 600)				_hx_tmp7 = false;
            			}
HXDLIN( 600)			if (_hx_tmp7) {
HXLINE( 602)				::flixel::addons::plugin::FlxMouseControl_obj::addToStack(hx::ObjectPtr<OBJ_>(this));
HXLINE( 603)				return;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,checkForClick,(void))

void FlxExtendedSprite_obj::mousePressedHandler(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","mousePressedHandler",0xe7d0cdda,"flixel.addons.display.FlxExtendedSprite.mousePressedHandler","flixel/addons/display/FlxExtendedSprite.hx",614,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 615)		this->isPressed = true;
HXLINE( 617)		Bool _hx_tmp;
HXDLIN( 617)		if ((this->clickable == true)) {
HXLINE( 617)			_hx_tmp = (this->_clickOnRelease == false);
            		}
            		else {
HXLINE( 617)			_hx_tmp = false;
            		}
HXDLIN( 617)		if (_hx_tmp) {
HXLINE( 619)			this->_clickCounter++;
            		}
HXLINE( 622)		Bool _hx_tmp1 = hx::IsNotNull( this->mousePressedCallback );
HXDLIN( 622)		if (_hx_tmp1) {
HXLINE( 624)			Int _hx_tmp2 = this->get_mouseX();
HXDLIN( 624)			Int _hx_tmp3 = this->get_mouseY();
HXDLIN( 624)			this->mousePressedCallback(hx::ObjectPtr<OBJ_>(this),_hx_tmp2,_hx_tmp3);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,mousePressedHandler,(void))

void FlxExtendedSprite_obj::mouseReleasedHandler(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","mouseReleasedHandler",0x893ebfbb,"flixel.addons.display.FlxExtendedSprite.mouseReleasedHandler","flixel/addons/display/FlxExtendedSprite.hx",632,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 633)		this->isPressed = false;
HXLINE( 635)		Bool _hx_tmp = (this->isDragged == true);
HXDLIN( 635)		if (_hx_tmp) {
HXLINE( 637)			this->stopDrag();
            		}
HXLINE( 640)		Bool _hx_tmp1;
HXDLIN( 640)		if ((this->clickable == true)) {
HXLINE( 640)			_hx_tmp1 = (this->_clickOnRelease == true);
            		}
            		else {
HXLINE( 640)			_hx_tmp1 = false;
            		}
HXDLIN( 640)		if (_hx_tmp1) {
HXLINE( 642)			this->_clickCounter++;
            		}
HXLINE( 645)		Bool _hx_tmp2 = (this->throwable == true);
HXDLIN( 645)		if (_hx_tmp2) {
HXLINE( 647)			Int _hx_tmp3 = (::flixel::addons::plugin::FlxMouseControl_obj::speedX * this->_throwXFactor);
HXDLIN( 647)			this->velocity->set_x(_hx_tmp3);
HXLINE( 648)			Int _hx_tmp4 = (::flixel::addons::plugin::FlxMouseControl_obj::speedY * this->_throwYFactor);
HXDLIN( 648)			this->velocity->set_y(_hx_tmp4);
            		}
HXLINE( 651)		Bool _hx_tmp5 = hx::IsNotNull( this->mouseReleasedCallback );
HXDLIN( 651)		if (_hx_tmp5) {
HXLINE( 653)			Int _hx_tmp6 = this->get_mouseX();
HXDLIN( 653)			Int _hx_tmp7 = this->get_mouseY();
HXDLIN( 653)			this->mouseReleasedCallback(hx::ObjectPtr<OBJ_>(this),_hx_tmp6,_hx_tmp7);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,mouseReleasedHandler,(void))

void FlxExtendedSprite_obj::startDrag(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","startDrag",0x579e32c3,"flixel.addons.display.FlxExtendedSprite.startDrag","flixel/addons/display/FlxExtendedSprite.hx",662,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 663)		this->isDragged = true;
HXLINE( 666)		Bool _hx_tmp = (this->_dragFromPoint == false);
HXDLIN( 666)		if (_hx_tmp) {
HXLINE( 668)			Float _hx_tmp1 = ((::flixel::FlxG_obj::mouse->screenX + (this->scrollFactor->x * (::flixel::FlxG_obj::mouse->x - ::flixel::FlxG_obj::mouse->screenX))) - this->x);
HXDLIN( 668)			this->_dragOffsetX = ::Math_obj::floor(_hx_tmp1);
HXLINE( 669)			Float _hx_tmp2 = ((::flixel::FlxG_obj::mouse->screenY + (this->scrollFactor->y * (::flixel::FlxG_obj::mouse->y - ::flixel::FlxG_obj::mouse->screenY))) - this->y);
HXDLIN( 669)			this->_dragOffsetY = ::Math_obj::floor(_hx_tmp2);
            		}
            		else {
HXLINE( 674)			Float _hx_tmp3 = ((Float)this->frameWidth / (Float)(int)2);
HXDLIN( 674)			this->_dragOffsetX = ::Std_obj::_hx_int(_hx_tmp3);
HXLINE( 675)			Float _hx_tmp4 = ((Float)this->frameHeight / (Float)(int)2);
HXDLIN( 675)			this->_dragOffsetY = ::Std_obj::_hx_int(_hx_tmp4);
            		}
HXLINE( 678)		Bool _hx_tmp5 = hx::IsNotNull( this->mouseStartDragCallback );
HXDLIN( 678)		if (_hx_tmp5) {
HXLINE( 680)			Int _hx_tmp6 = this->get_mouseX();
HXDLIN( 680)			Int _hx_tmp7 = this->get_mouseY();
HXDLIN( 680)			this->mouseStartDragCallback(hx::ObjectPtr<OBJ_>(this),_hx_tmp6,_hx_tmp7);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,startDrag,(void))

void FlxExtendedSprite_obj::checkBoundsRect(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","checkBoundsRect",0x102b4a2e,"flixel.addons.display.FlxExtendedSprite.checkBoundsRect","flixel/addons/display/FlxExtendedSprite.hx",689,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 690)		Bool _hx_tmp = (this->x < this->boundsRect->x);
HXDLIN( 690)		if (_hx_tmp) {
HXLINE( 692)			this->set_x(this->boundsRect->x);
            		}
            		else {
HXLINE( 694)			Float _hx_tmp1 = this->x;
HXDLIN( 694)			Float _hx_tmp2 = this->get_width();
HXDLIN( 694)			Float _hx_tmp3 = (_hx_tmp1 + _hx_tmp2);
HXDLIN( 694)			HX_VARI(  ::flixel::math::FlxRect,_this) = this->boundsRect;
HXDLIN( 694)			Bool _hx_tmp4 = (_hx_tmp3 > (_this->x + _this->width));
HXDLIN( 694)			if (_hx_tmp4) {
HXLINE( 696)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->boundsRect;
HXDLIN( 696)				Float _hx_tmp5 = (_this1->x + _this1->width);
HXDLIN( 696)				Float _hx_tmp6 = this->get_width();
HXDLIN( 696)				this->set_x((_hx_tmp5 - _hx_tmp6));
            			}
            		}
HXLINE( 699)		Bool _hx_tmp7 = (this->y < this->boundsRect->y);
HXDLIN( 699)		if (_hx_tmp7) {
HXLINE( 701)			this->set_y(this->boundsRect->y);
            		}
            		else {
HXLINE( 703)			Float _hx_tmp8 = this->y;
HXDLIN( 703)			Float _hx_tmp9 = this->get_height();
HXDLIN( 703)			Float _hx_tmp10 = (_hx_tmp8 + _hx_tmp9);
HXDLIN( 703)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = this->boundsRect;
HXDLIN( 703)			Bool _hx_tmp11 = (_hx_tmp10 > (_this2->y + _this2->height));
HXDLIN( 703)			if (_hx_tmp11) {
HXLINE( 705)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this3,"_this") = this->boundsRect;
HXDLIN( 705)				Float _hx_tmp12 = (_this3->y + _this3->height);
HXDLIN( 705)				Float _hx_tmp13 = this->get_height();
HXDLIN( 705)				this->set_y((_hx_tmp12 - _hx_tmp13));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,checkBoundsRect,(void))

void FlxExtendedSprite_obj::checkBoundsSprite(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","checkBoundsSprite",0xaedaaf8f,"flixel.addons.display.FlxExtendedSprite.checkBoundsSprite","flixel/addons/display/FlxExtendedSprite.hx",713,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 714)		Bool _hx_tmp = (this->x < this->boundsSprite->x);
HXDLIN( 714)		if (_hx_tmp) {
HXLINE( 716)			this->set_x(this->boundsSprite->x);
            		}
            		else {
HXLINE( 718)			Float _hx_tmp1 = this->x;
HXDLIN( 718)			Float _hx_tmp2 = this->get_width();
HXDLIN( 718)			Float _hx_tmp3 = (_hx_tmp1 + _hx_tmp2);
HXDLIN( 718)			Float _hx_tmp4 = this->boundsSprite->x;
HXDLIN( 718)			Float _hx_tmp5 = this->boundsSprite->get_width();
HXDLIN( 718)			if ((_hx_tmp3 > (_hx_tmp4 + _hx_tmp5))) {
HXLINE( 720)				Float _hx_tmp6 = this->boundsSprite->x;
HXDLIN( 720)				Float _hx_tmp7 = this->boundsSprite->get_width();
HXDLIN( 720)				Float _hx_tmp8 = (_hx_tmp6 + _hx_tmp7);
HXDLIN( 720)				Float _hx_tmp9 = this->get_width();
HXDLIN( 720)				this->set_x((_hx_tmp8 - _hx_tmp9));
            			}
            		}
HXLINE( 723)		Bool _hx_tmp10 = (this->y < this->boundsSprite->y);
HXDLIN( 723)		if (_hx_tmp10) {
HXLINE( 725)			this->set_y(this->boundsSprite->y);
            		}
            		else {
HXLINE( 727)			Float _hx_tmp11 = this->y;
HXDLIN( 727)			Float _hx_tmp12 = this->get_height();
HXDLIN( 727)			Float _hx_tmp13 = (_hx_tmp11 + _hx_tmp12);
HXDLIN( 727)			Float _hx_tmp14 = this->boundsSprite->y;
HXDLIN( 727)			Float _hx_tmp15 = this->boundsSprite->get_height();
HXDLIN( 727)			if ((_hx_tmp13 > (_hx_tmp14 + _hx_tmp15))) {
HXLINE( 729)				Float _hx_tmp16 = this->boundsSprite->y;
HXDLIN( 729)				Float _hx_tmp17 = this->boundsSprite->get_height();
HXDLIN( 729)				Float _hx_tmp18 = (_hx_tmp16 + _hx_tmp17);
HXDLIN( 729)				Float _hx_tmp19 = this->get_height();
HXDLIN( 729)				this->set_y((_hx_tmp18 - _hx_tmp19));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,checkBoundsSprite,(void))

void FlxExtendedSprite_obj::stopDrag(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","stopDrag",0x5f9fcc69,"flixel.addons.display.FlxExtendedSprite.stopDrag","flixel/addons/display/FlxExtendedSprite.hx",737,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 738)		this->isDragged = false;
HXLINE( 740)		Bool _hx_tmp = this->_snapOnRelease;
HXDLIN( 740)		if (_hx_tmp) {
HXLINE( 742)			Float _hx_tmp1 = ((Float)this->x / (Float)this->_snapX);
HXDLIN( 742)			Int _hx_tmp2 = ::Math_obj::floor(_hx_tmp1);
HXDLIN( 742)			Int _hx_tmp3 = (_hx_tmp2 * this->_snapX);
HXDLIN( 742)			this->set_x(_hx_tmp3);
HXLINE( 743)			Float _hx_tmp4 = ((Float)this->y / (Float)this->_snapY);
HXDLIN( 743)			Int _hx_tmp5 = ::Math_obj::floor(_hx_tmp4);
HXDLIN( 743)			Int _hx_tmp6 = (_hx_tmp5 * this->_snapY);
HXDLIN( 743)			this->set_y(_hx_tmp6);
            		}
HXLINE( 747)		Bool _hx_tmp7 = hx::IsNotNull( this->mouseStopDragCallback );
HXDLIN( 747)		if (_hx_tmp7) {
HXLINE( 749)			Int _hx_tmp8 = this->get_mouseX();
HXDLIN( 749)			Int _hx_tmp9 = this->get_mouseY();
HXDLIN( 749)			this->mouseStopDragCallback(hx::ObjectPtr<OBJ_>(this),_hx_tmp8,_hx_tmp9);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,stopDrag,(void))

void FlxExtendedSprite_obj::setGravity(Int GravityX,Int GravityY,hx::Null< Float >  __o_FrictionX,hx::Null< Float >  __o_FrictionY,hx::Null< Float >  __o_ToleranceX,hx::Null< Float >  __o_ToleranceY){
Float FrictionX = __o_FrictionX.Default(500);
Float FrictionY = __o_FrictionY.Default(500);
Float ToleranceX = __o_ToleranceX.Default(10);
Float ToleranceY = __o_ToleranceY.Default(10);
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","setGravity",0x21dfa8df,"flixel.addons.display.FlxExtendedSprite.setGravity","flixel/addons/display/FlxExtendedSprite.hx",766,0xe2826ec4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(GravityX,"GravityX")
            	HX_STACK_ARG(GravityY,"GravityY")
            	HX_STACK_ARG(FrictionX,"FrictionX")
            	HX_STACK_ARG(FrictionY,"FrictionY")
            	HX_STACK_ARG(ToleranceX,"ToleranceX")
            	HX_STACK_ARG(ToleranceY,"ToleranceY")
HXLINE( 767)		this->hasGravity = true;
HXLINE( 769)		this->gravityX = GravityX;
HXLINE( 770)		this->gravityY = GravityY;
HXLINE( 772)		this->frictionX = FrictionX;
HXLINE( 773)		this->frictionY = FrictionY;
HXLINE( 775)		this->toleranceX = ToleranceX;
HXLINE( 776)		this->toleranceY = ToleranceY;
HXLINE( 778)		Bool _hx_tmp;
HXDLIN( 778)		if ((GravityX == (int)0)) {
HXLINE( 778)			_hx_tmp = (GravityY == (int)0);
            		}
            		else {
HXLINE( 778)			_hx_tmp = false;
            		}
HXDLIN( 778)		if (_hx_tmp) {
HXLINE( 780)			this->hasGravity = false;
            		}
HXLINE( 783)		this->acceleration->set_x(GravityX);
HXLINE( 784)		this->acceleration->set_y(GravityY);
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxExtendedSprite_obj,setGravity,(void))

void FlxExtendedSprite_obj::flipGravity(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","flipGravity",0x12621dae,"flixel.addons.display.FlxExtendedSprite.flipGravity","flixel/addons/display/FlxExtendedSprite.hx",792,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 793)		Bool _hx_tmp;
HXDLIN( 793)		Bool _hx_tmp1 = !(::Math_obj::isNaN(this->gravityX));
HXDLIN( 793)		if (_hx_tmp1) {
HXLINE( 793)			_hx_tmp = (this->gravityX != (int)0);
            		}
            		else {
HXLINE( 793)			_hx_tmp = false;
            		}
HXDLIN( 793)		if (_hx_tmp) {
HXLINE( 795)			this->gravityX = -(this->gravityX);
HXLINE( 796)			this->acceleration->set_x(this->gravityX);
            		}
HXLINE( 799)		Bool _hx_tmp2;
HXDLIN( 799)		Bool _hx_tmp3 = !(::Math_obj::isNaN(this->gravityY));
HXDLIN( 799)		if (_hx_tmp3) {
HXLINE( 799)			_hx_tmp2 = (this->gravityY != (int)0);
            		}
            		else {
HXLINE( 799)			_hx_tmp2 = false;
            		}
HXDLIN( 799)		if (_hx_tmp2) {
HXLINE( 801)			this->gravityY = -(this->gravityY);
HXLINE( 802)			this->acceleration->set_y(this->gravityY);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,flipGravity,(void))

Int FlxExtendedSprite_obj::get_clicks(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","get_clicks",0x51d6c907,"flixel.addons.display.FlxExtendedSprite.get_clicks","flixel/addons/display/FlxExtendedSprite.hx",808,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 808)		return this->_clickCounter;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,get_clicks,return )

Int FlxExtendedSprite_obj::set_clicks(Int NewValue){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","set_clicks",0x5554677b,"flixel.addons.display.FlxExtendedSprite.set_clicks","flixel/addons/display/FlxExtendedSprite.hx",813,0xe2826ec4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(NewValue,"NewValue")
HXLINE( 813)		return (this->_clickCounter = NewValue);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxExtendedSprite_obj,set_clicks,return )

Int FlxExtendedSprite_obj::get_springX(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","get_springX",0xaf72b78f,"flixel.addons.display.FlxExtendedSprite.get_springX","flixel/addons/display/FlxExtendedSprite.hx",818,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 818)		Float _hx_tmp = (this->x + this->springOffsetX);
HXDLIN( 818)		return ::Math_obj::floor(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,get_springX,return )

Int FlxExtendedSprite_obj::get_springY(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","get_springY",0xaf72b790,"flixel.addons.display.FlxExtendedSprite.get_springY","flixel/addons/display/FlxExtendedSprite.hx",823,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 823)		Float _hx_tmp = (this->y + this->springOffsetY);
HXDLIN( 823)		return ::Math_obj::floor(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,get_springY,return )

 ::flixel::math::FlxPoint FlxExtendedSprite_obj::get_point(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","get_point",0x66739df4,"flixel.addons.display.FlxExtendedSprite.get_point","flixel/addons/display/FlxExtendedSprite.hx",828,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 828)		return this->_point;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,get_point,return )

 ::flixel::math::FlxPoint FlxExtendedSprite_obj::set_point( ::flixel::math::FlxPoint NewPoint){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","set_point",0x49c48a00,"flixel.addons.display.FlxExtendedSprite.set_point","flixel/addons/display/FlxExtendedSprite.hx",833,0xe2826ec4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(NewPoint,"NewPoint")
HXLINE( 833)		return (this->_point = NewPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxExtendedSprite_obj,set_point,return )

Bool FlxExtendedSprite_obj::get_mouseOver(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","get_mouseOver",0x8e50d5bd,"flixel.addons.display.FlxExtendedSprite.get_mouseOver","flixel/addons/display/FlxExtendedSprite.hx",841,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 841)		Int _hx_tmp = ::flixel::FlxG_obj::mouse->screenX;
HXDLIN( 841)		Float _hx_tmp1 = (this->scrollFactor->x * (::flixel::FlxG_obj::mouse->x - ::flixel::FlxG_obj::mouse->screenX));
HXDLIN( 841)		Int _hx_tmp2 = ::Math_obj::floor((_hx_tmp + _hx_tmp1));
HXLINE( 842)		Int _hx_tmp3 = ::flixel::FlxG_obj::mouse->screenY;
HXDLIN( 842)		Float _hx_tmp4 = (this->scrollFactor->y * (::flixel::FlxG_obj::mouse->y - ::flixel::FlxG_obj::mouse->screenY));
HXDLIN( 842)		Int _hx_tmp5 = ::Math_obj::floor((_hx_tmp3 + _hx_tmp4));
HXLINE( 843)		Int _hx_tmp6 = ::Math_obj::floor(this->x);
HXLINE( 844)		Int _hx_tmp7 = ::Math_obj::floor(this->y);
HXLINE( 845)		Float _hx_tmp8 = this->get_width();
HXDLIN( 845)		Int _hx_tmp9 = ::Math_obj::floor(_hx_tmp8);
HXLINE( 846)		Float _hx_tmp10 = this->get_height();
HXDLIN( 846)		Int _hx_tmp11 = ::Math_obj::floor(_hx_tmp10);
HXLINE( 841)		return ::flixel::math::FlxMath_obj::pointInCoordinates(_hx_tmp2,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp9,_hx_tmp11);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,get_mouseOver,return )

Int FlxExtendedSprite_obj::get_mouseX(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","get_mouseX",0x1396d06f,"flixel.addons.display.FlxExtendedSprite.get_mouseX","flixel/addons/display/FlxExtendedSprite.hx",851,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 852)		Bool _hx_tmp = this->get_mouseOver();
HXDLIN( 852)		if (_hx_tmp) {
HXLINE( 854)			Float _hx_tmp1 = (::flixel::FlxG_obj::mouse->x - this->x);
HXDLIN( 854)			return ::Math_obj::floor(_hx_tmp1);
            		}
HXLINE( 857)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,get_mouseX,return )

Int FlxExtendedSprite_obj::get_mouseY(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","get_mouseY",0x1396d070,"flixel.addons.display.FlxExtendedSprite.get_mouseY","flixel/addons/display/FlxExtendedSprite.hx",861,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 862)		Bool _hx_tmp = this->get_mouseOver();
HXDLIN( 862)		if (_hx_tmp) {
HXLINE( 864)			Float _hx_tmp1 = (::flixel::FlxG_obj::mouse->y - this->y);
HXDLIN( 864)			return ::Math_obj::floor(_hx_tmp1);
            		}
HXLINE( 867)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,get_mouseY,return )

 ::flixel::math::FlxRect FlxExtendedSprite_obj::get_rect(){
            	HX_STACK_FRAME("flixel.addons.display.FlxExtendedSprite","get_rect",0x95d76400,"flixel.addons.display.FlxExtendedSprite.get_rect","flixel/addons/display/FlxExtendedSprite.hx",872,0xe2826ec4)
            	HX_STACK_THIS(this)
HXLINE( 873)		this->_rect->x = this->x;
HXLINE( 874)		this->_rect->y = this->y;
HXLINE( 875)		this->_rect->width = this->get_width();
HXLINE( 876)		this->_rect->height = this->get_height();
HXLINE( 878)		return this->_rect;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxExtendedSprite_obj,get_rect,return )


FlxExtendedSprite_obj::FlxExtendedSprite_obj()
{
}

void FlxExtendedSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxExtendedSprite);
	HX_MARK_MEMBER_NAME(priorityID,"priorityID");
	HX_MARK_MEMBER_NAME(isPressed,"isPressed");
	HX_MARK_MEMBER_NAME(clickable,"clickable");
	HX_MARK_MEMBER_NAME(throwable,"throwable");
	HX_MARK_MEMBER_NAME(boundsRect,"boundsRect");
	HX_MARK_MEMBER_NAME(boundsSprite,"boundsSprite");
	HX_MARK_MEMBER_NAME(hasGravity,"hasGravity");
	HX_MARK_MEMBER_NAME(gravityX,"gravityX");
	HX_MARK_MEMBER_NAME(gravityY,"gravityY");
	HX_MARK_MEMBER_NAME(frictionX,"frictionX");
	HX_MARK_MEMBER_NAME(frictionY,"frictionY");
	HX_MARK_MEMBER_NAME(toleranceX,"toleranceX");
	HX_MARK_MEMBER_NAME(toleranceY,"toleranceY");
	HX_MARK_MEMBER_NAME(isDragged,"isDragged");
	HX_MARK_MEMBER_NAME(draggable,"draggable");
	HX_MARK_MEMBER_NAME(springOnPressed,"springOnPressed");
	HX_MARK_MEMBER_NAME(springOffsetX,"springOffsetX");
	HX_MARK_MEMBER_NAME(springOffsetY,"springOffsetY");
	HX_MARK_MEMBER_NAME(mousePressedCallback,"mousePressedCallback");
	HX_MARK_MEMBER_NAME(mouseReleasedCallback,"mouseReleasedCallback");
	HX_MARK_MEMBER_NAME(mouseSpring,"mouseSpring");
	HX_MARK_MEMBER_NAME(mouseStartDragCallback,"mouseStartDragCallback");
	HX_MARK_MEMBER_NAME(mouseStopDragCallback,"mouseStopDragCallback");
	HX_MARK_MEMBER_NAME(hasMouseSpring,"hasMouseSpring");
	HX_MARK_MEMBER_NAME(_snapOnDrag,"_snapOnDrag");
	HX_MARK_MEMBER_NAME(_snapOnRelease,"_snapOnRelease");
	HX_MARK_MEMBER_NAME(_snapX,"_snapX");
	HX_MARK_MEMBER_NAME(_snapY,"_snapY");
	HX_MARK_MEMBER_NAME(_clickOnRelease,"_clickOnRelease");
	HX_MARK_MEMBER_NAME(_clickPixelPerfect,"_clickPixelPerfect");
	HX_MARK_MEMBER_NAME(_clickPixelPerfectAlpha,"_clickPixelPerfectAlpha");
	HX_MARK_MEMBER_NAME(_clickCounter,"_clickCounter");
	HX_MARK_MEMBER_NAME(_throwXFactor,"_throwXFactor");
	HX_MARK_MEMBER_NAME(_throwYFactor,"_throwYFactor");
	HX_MARK_MEMBER_NAME(_dragPixelPerfect,"_dragPixelPerfect");
	HX_MARK_MEMBER_NAME(_dragPixelPerfectAlpha,"_dragPixelPerfectAlpha");
	HX_MARK_MEMBER_NAME(_dragOffsetX,"_dragOffsetX");
	HX_MARK_MEMBER_NAME(_dragOffsetY,"_dragOffsetY");
	HX_MARK_MEMBER_NAME(_dragFromPoint,"_dragFromPoint");
	HX_MARK_MEMBER_NAME(_allowHorizontalDrag,"_allowHorizontalDrag");
	HX_MARK_MEMBER_NAME(_allowVerticalDrag,"_allowVerticalDrag");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxExtendedSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(priorityID,"priorityID");
	HX_VISIT_MEMBER_NAME(isPressed,"isPressed");
	HX_VISIT_MEMBER_NAME(clickable,"clickable");
	HX_VISIT_MEMBER_NAME(throwable,"throwable");
	HX_VISIT_MEMBER_NAME(boundsRect,"boundsRect");
	HX_VISIT_MEMBER_NAME(boundsSprite,"boundsSprite");
	HX_VISIT_MEMBER_NAME(hasGravity,"hasGravity");
	HX_VISIT_MEMBER_NAME(gravityX,"gravityX");
	HX_VISIT_MEMBER_NAME(gravityY,"gravityY");
	HX_VISIT_MEMBER_NAME(frictionX,"frictionX");
	HX_VISIT_MEMBER_NAME(frictionY,"frictionY");
	HX_VISIT_MEMBER_NAME(toleranceX,"toleranceX");
	HX_VISIT_MEMBER_NAME(toleranceY,"toleranceY");
	HX_VISIT_MEMBER_NAME(isDragged,"isDragged");
	HX_VISIT_MEMBER_NAME(draggable,"draggable");
	HX_VISIT_MEMBER_NAME(springOnPressed,"springOnPressed");
	HX_VISIT_MEMBER_NAME(springOffsetX,"springOffsetX");
	HX_VISIT_MEMBER_NAME(springOffsetY,"springOffsetY");
	HX_VISIT_MEMBER_NAME(mousePressedCallback,"mousePressedCallback");
	HX_VISIT_MEMBER_NAME(mouseReleasedCallback,"mouseReleasedCallback");
	HX_VISIT_MEMBER_NAME(mouseSpring,"mouseSpring");
	HX_VISIT_MEMBER_NAME(mouseStartDragCallback,"mouseStartDragCallback");
	HX_VISIT_MEMBER_NAME(mouseStopDragCallback,"mouseStopDragCallback");
	HX_VISIT_MEMBER_NAME(hasMouseSpring,"hasMouseSpring");
	HX_VISIT_MEMBER_NAME(_snapOnDrag,"_snapOnDrag");
	HX_VISIT_MEMBER_NAME(_snapOnRelease,"_snapOnRelease");
	HX_VISIT_MEMBER_NAME(_snapX,"_snapX");
	HX_VISIT_MEMBER_NAME(_snapY,"_snapY");
	HX_VISIT_MEMBER_NAME(_clickOnRelease,"_clickOnRelease");
	HX_VISIT_MEMBER_NAME(_clickPixelPerfect,"_clickPixelPerfect");
	HX_VISIT_MEMBER_NAME(_clickPixelPerfectAlpha,"_clickPixelPerfectAlpha");
	HX_VISIT_MEMBER_NAME(_clickCounter,"_clickCounter");
	HX_VISIT_MEMBER_NAME(_throwXFactor,"_throwXFactor");
	HX_VISIT_MEMBER_NAME(_throwYFactor,"_throwYFactor");
	HX_VISIT_MEMBER_NAME(_dragPixelPerfect,"_dragPixelPerfect");
	HX_VISIT_MEMBER_NAME(_dragPixelPerfectAlpha,"_dragPixelPerfectAlpha");
	HX_VISIT_MEMBER_NAME(_dragOffsetX,"_dragOffsetX");
	HX_VISIT_MEMBER_NAME(_dragOffsetY,"_dragOffsetY");
	HX_VISIT_MEMBER_NAME(_dragFromPoint,"_dragFromPoint");
	HX_VISIT_MEMBER_NAME(_allowHorizontalDrag,"_allowHorizontalDrag");
	HX_VISIT_MEMBER_NAME(_allowVerticalDrag,"_allowVerticalDrag");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxExtendedSprite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_rect()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_point()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"clicks") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_clicks()); }
		if (HX_FIELD_EQ(inName,"mouseX") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_mouseX()); }
		if (HX_FIELD_EQ(inName,"mouseY") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_mouseY()); }
		if (HX_FIELD_EQ(inName,"_snapX") ) { return hx::Val( _snapX); }
		if (HX_FIELD_EQ(inName,"_snapY") ) { return hx::Val( _snapY); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"springX") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_springX()); }
		if (HX_FIELD_EQ(inName,"springY") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_springY()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gravityX") ) { return hx::Val( gravityX); }
		if (HX_FIELD_EQ(inName,"gravityY") ) { return hx::Val( gravityY); }
		if (HX_FIELD_EQ(inName,"stopDrag") ) { return hx::Val( stopDrag_dyn()); }
		if (HX_FIELD_EQ(inName,"get_rect") ) { return hx::Val( get_rect_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPressed") ) { return hx::Val( isPressed); }
		if (HX_FIELD_EQ(inName,"clickable") ) { return hx::Val( clickable); }
		if (HX_FIELD_EQ(inName,"throwable") ) { return hx::Val( throwable); }
		if (HX_FIELD_EQ(inName,"frictionX") ) { return hx::Val( frictionX); }
		if (HX_FIELD_EQ(inName,"frictionY") ) { return hx::Val( frictionY); }
		if (HX_FIELD_EQ(inName,"isDragged") ) { return hx::Val( isDragged); }
		if (HX_FIELD_EQ(inName,"draggable") ) { return hx::Val( draggable); }
		if (HX_FIELD_EQ(inName,"mouseOver") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_mouseOver()); }
		if (HX_FIELD_EQ(inName,"startDrag") ) { return hx::Val( startDrag_dyn()); }
		if (HX_FIELD_EQ(inName,"get_point") ) { return hx::Val( get_point_dyn()); }
		if (HX_FIELD_EQ(inName,"set_point") ) { return hx::Val( set_point_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"priorityID") ) { return hx::Val( priorityID); }
		if (HX_FIELD_EQ(inName,"boundsRect") ) { return hx::Val( boundsRect); }
		if (HX_FIELD_EQ(inName,"hasGravity") ) { return hx::Val( hasGravity); }
		if (HX_FIELD_EQ(inName,"toleranceX") ) { return hx::Val( toleranceX); }
		if (HX_FIELD_EQ(inName,"toleranceY") ) { return hx::Val( toleranceY); }
		if (HX_FIELD_EQ(inName,"updateDrag") ) { return hx::Val( updateDrag_dyn()); }
		if (HX_FIELD_EQ(inName,"setGravity") ) { return hx::Val( setGravity_dyn()); }
		if (HX_FIELD_EQ(inName,"get_clicks") ) { return hx::Val( get_clicks_dyn()); }
		if (HX_FIELD_EQ(inName,"set_clicks") ) { return hx::Val( set_clicks_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseX") ) { return hx::Val( get_mouseX_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseY") ) { return hx::Val( get_mouseY_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mouseSpring") ) { return hx::Val( mouseSpring); }
		if (HX_FIELD_EQ(inName,"_snapOnDrag") ) { return hx::Val( _snapOnDrag); }
		if (HX_FIELD_EQ(inName,"setDragLock") ) { return hx::Val( setDragLock_dyn()); }
		if (HX_FIELD_EQ(inName,"flipGravity") ) { return hx::Val( flipGravity_dyn()); }
		if (HX_FIELD_EQ(inName,"get_springX") ) { return hx::Val( get_springX_dyn()); }
		if (HX_FIELD_EQ(inName,"get_springY") ) { return hx::Val( get_springY_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"boundsSprite") ) { return hx::Val( boundsSprite); }
		if (HX_FIELD_EQ(inName,"_dragOffsetX") ) { return hx::Val( _dragOffsetX); }
		if (HX_FIELD_EQ(inName,"_dragOffsetY") ) { return hx::Val( _dragOffsetY); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"springOffsetX") ) { return hx::Val( springOffsetX); }
		if (HX_FIELD_EQ(inName,"springOffsetY") ) { return hx::Val( springOffsetY); }
		if (HX_FIELD_EQ(inName,"_clickCounter") ) { return hx::Val( _clickCounter); }
		if (HX_FIELD_EQ(inName,"_throwXFactor") ) { return hx::Val( _throwXFactor); }
		if (HX_FIELD_EQ(inName,"_throwYFactor") ) { return hx::Val( _throwYFactor); }
		if (HX_FIELD_EQ(inName,"updateGravity") ) { return hx::Val( updateGravity_dyn()); }
		if (HX_FIELD_EQ(inName,"checkForClick") ) { return hx::Val( checkForClick_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseOver") ) { return hx::Val( get_mouseOver_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"hasMouseSpring") ) { return hx::Val( hasMouseSpring); }
		if (HX_FIELD_EQ(inName,"_snapOnRelease") ) { return hx::Val( _snapOnRelease); }
		if (HX_FIELD_EQ(inName,"_dragFromPoint") ) { return hx::Val( _dragFromPoint); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"springOnPressed") ) { return hx::Val( springOnPressed); }
		if (HX_FIELD_EQ(inName,"_clickOnRelease") ) { return hx::Val( _clickOnRelease); }
		if (HX_FIELD_EQ(inName,"enableMouseDrag") ) { return hx::Val( enableMouseDrag_dyn()); }
		if (HX_FIELD_EQ(inName,"enableMouseSnap") ) { return hx::Val( enableMouseSnap_dyn()); }
		if (HX_FIELD_EQ(inName,"checkBoundsRect") ) { return hx::Val( checkBoundsRect_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"disableMouseDrag") ) { return hx::Val( disableMouseDrag_dyn()); }
		if (HX_FIELD_EQ(inName,"enableMouseThrow") ) { return hx::Val( enableMouseThrow_dyn()); }
		if (HX_FIELD_EQ(inName,"disableMouseSnap") ) { return hx::Val( disableMouseSnap_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_dragPixelPerfect") ) { return hx::Val( _dragPixelPerfect); }
		if (HX_FIELD_EQ(inName,"enableMouseClicks") ) { return hx::Val( enableMouseClicks_dyn()); }
		if (HX_FIELD_EQ(inName,"disableMouseThrow") ) { return hx::Val( disableMouseThrow_dyn()); }
		if (HX_FIELD_EQ(inName,"enableMouseSpring") ) { return hx::Val( enableMouseSpring_dyn()); }
		if (HX_FIELD_EQ(inName,"checkBoundsSprite") ) { return hx::Val( checkBoundsSprite_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_clickPixelPerfect") ) { return hx::Val( _clickPixelPerfect); }
		if (HX_FIELD_EQ(inName,"_allowVerticalDrag") ) { return hx::Val( _allowVerticalDrag); }
		if (HX_FIELD_EQ(inName,"disableMouseClicks") ) { return hx::Val( disableMouseClicks_dyn()); }
		if (HX_FIELD_EQ(inName,"disableMouseSpring") ) { return hx::Val( disableMouseSpring_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mousePressedHandler") ) { return hx::Val( mousePressedHandler_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"mousePressedCallback") ) { return hx::Val( mousePressedCallback); }
		if (HX_FIELD_EQ(inName,"_allowHorizontalDrag") ) { return hx::Val( _allowHorizontalDrag); }
		if (HX_FIELD_EQ(inName,"mouseReleasedHandler") ) { return hx::Val( mouseReleasedHandler_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"mouseReleasedCallback") ) { return hx::Val( mouseReleasedCallback); }
		if (HX_FIELD_EQ(inName,"mouseStopDragCallback") ) { return hx::Val( mouseStopDragCallback); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"mouseStartDragCallback") ) { return hx::Val( mouseStartDragCallback); }
		if (HX_FIELD_EQ(inName,"_dragPixelPerfectAlpha") ) { return hx::Val( _dragPixelPerfectAlpha); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_clickPixelPerfectAlpha") ) { return hx::Val( _clickPixelPerfectAlpha); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxExtendedSprite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_point(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"clicks") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_clicks(inValue) ); }
		if (HX_FIELD_EQ(inName,"_snapX") ) { _snapX=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_snapY") ) { _snapY=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gravityX") ) { gravityX=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityY") ) { gravityY=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPressed") ) { isPressed=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clickable") ) { clickable=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"throwable") ) { throwable=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frictionX") ) { frictionX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frictionY") ) { frictionY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDragged") ) { isDragged=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"draggable") ) { draggable=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"priorityID") ) { priorityID=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boundsRect") ) { boundsRect=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasGravity") ) { hasGravity=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toleranceX") ) { toleranceX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toleranceY") ) { toleranceY=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mouseSpring") ) { mouseSpring=inValue.Cast<  ::flixel::addons::display::FlxMouseSpring >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_snapOnDrag") ) { _snapOnDrag=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"boundsSprite") ) { boundsSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dragOffsetX") ) { _dragOffsetX=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dragOffsetY") ) { _dragOffsetY=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"springOffsetX") ) { springOffsetX=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"springOffsetY") ) { springOffsetY=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_clickCounter") ) { _clickCounter=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_throwXFactor") ) { _throwXFactor=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_throwYFactor") ) { _throwYFactor=inValue.Cast< Int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"hasMouseSpring") ) { hasMouseSpring=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_snapOnRelease") ) { _snapOnRelease=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dragFromPoint") ) { _dragFromPoint=inValue.Cast< Bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"springOnPressed") ) { springOnPressed=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_clickOnRelease") ) { _clickOnRelease=inValue.Cast< Bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_dragPixelPerfect") ) { _dragPixelPerfect=inValue.Cast< Bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_clickPixelPerfect") ) { _clickPixelPerfect=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_allowVerticalDrag") ) { _allowVerticalDrag=inValue.Cast< Bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"mousePressedCallback") ) { mousePressedCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_allowHorizontalDrag") ) { _allowHorizontalDrag=inValue.Cast< Bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"mouseReleasedCallback") ) { mouseReleasedCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseStopDragCallback") ) { mouseStopDragCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"mouseStartDragCallback") ) { mouseStartDragCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dragPixelPerfectAlpha") ) { _dragPixelPerfectAlpha=inValue.Cast< Int >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_clickPixelPerfectAlpha") ) { _clickPixelPerfectAlpha=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxExtendedSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("priorityID","\x3f","\x5c","\x5f","\xe4"));
	outFields->push(HX_HCSTRING("isPressed","\xd8","\x4f","\xe5","\x3d"));
	outFields->push(HX_HCSTRING("clickable","\xe2","\xad","\x8e","\x34"));
	outFields->push(HX_HCSTRING("throwable","\xc0","\x55","\x25","\x7d"));
	outFields->push(HX_HCSTRING("boundsRect","\x39","\xde","\xba","\x7e"));
	outFields->push(HX_HCSTRING("boundsSprite","\x5a","\x9c","\x7f","\x8f"));
	outFields->push(HX_HCSTRING("hasGravity","\x14","\x56","\xb3","\x02"));
	outFields->push(HX_HCSTRING("gravityX","\x4a","\x16","\x81","\x87"));
	outFields->push(HX_HCSTRING("gravityY","\x4b","\x16","\x81","\x87"));
	outFields->push(HX_HCSTRING("frictionX","\x1e","\x62","\x80","\x38"));
	outFields->push(HX_HCSTRING("frictionY","\x1f","\x62","\x80","\x38"));
	outFields->push(HX_HCSTRING("toleranceX","\xab","\x2e","\x39","\xd9"));
	outFields->push(HX_HCSTRING("toleranceY","\xac","\x2e","\x39","\xd9"));
	outFields->push(HX_HCSTRING("isDragged","\x48","\xc2","\x51","\xf5"));
	outFields->push(HX_HCSTRING("draggable","\x0d","\x2d","\xd6","\x5d"));
	outFields->push(HX_HCSTRING("springOnPressed","\xb6","\xd2","\x05","\x91"));
	outFields->push(HX_HCSTRING("springOffsetX","\x18","\x7e","\x8c","\xa6"));
	outFields->push(HX_HCSTRING("springOffsetY","\x19","\x7e","\x8c","\xa6"));
	outFields->push(HX_HCSTRING("mouseSpring","\xd2","\x0a","\x1e","\xb9"));
	outFields->push(HX_HCSTRING("hasMouseSpring","\x98","\x4d","\xa8","\xaa"));
	outFields->push(HX_HCSTRING("clicks","\x2b","\x43","\x4e","\x0a"));
	outFields->push(HX_HCSTRING("springX","\xeb","\x1c","\x86","\x5f"));
	outFields->push(HX_HCSTRING("springY","\xec","\x1c","\x86","\x5f"));
	outFields->push(HX_HCSTRING("point","\x50","\xb4","\x8f","\xc6"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("mouseOver","\x19","\x4a","\x0d","\xf6"));
	outFields->push(HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("_snapOnDrag","\xbc","\x9f","\xc8","\xce"));
	outFields->push(HX_HCSTRING("_snapOnRelease","\xff","\x9e","\x51","\x9b"));
	outFields->push(HX_HCSTRING("_snapX","\x0f","\x72","\xfb","\x7b"));
	outFields->push(HX_HCSTRING("_snapY","\x10","\x72","\xfb","\x7b"));
	outFields->push(HX_HCSTRING("_clickOnRelease","\x9f","\x21","\xaf","\xfe"));
	outFields->push(HX_HCSTRING("_clickPixelPerfect","\x50","\xdc","\x03","\x38"));
	outFields->push(HX_HCSTRING("_clickPixelPerfectAlpha","\xee","\x98","\xcf","\x11"));
	outFields->push(HX_HCSTRING("_clickCounter","\x73","\x86","\xf2","\xf1"));
	outFields->push(HX_HCSTRING("_throwXFactor","\xc0","\xa5","\xd3","\x19"));
	outFields->push(HX_HCSTRING("_throwYFactor","\x81","\x1c","\x69","\x43"));
	outFields->push(HX_HCSTRING("_dragPixelPerfect","\x9a","\xa7","\x19","\xc0"));
	outFields->push(HX_HCSTRING("_dragPixelPerfectAlpha","\x64","\xa1","\x42","\x26"));
	outFields->push(HX_HCSTRING("_dragOffsetX","\xd2","\xd9","\x8f","\xf3"));
	outFields->push(HX_HCSTRING("_dragOffsetY","\xd3","\xd9","\x8f","\xf3"));
	outFields->push(HX_HCSTRING("_dragFromPoint","\x33","\x24","\xea","\x13"));
	outFields->push(HX_HCSTRING("_allowHorizontalDrag","\x62","\x64","\x99","\x55"));
	outFields->push(HX_HCSTRING("_allowVerticalDrag","\x74","\x46","\xda","\xfd"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxExtendedSprite_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,priorityID),HX_HCSTRING("priorityID","\x3f","\x5c","\x5f","\xe4")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,isPressed),HX_HCSTRING("isPressed","\xd8","\x4f","\xe5","\x3d")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,clickable),HX_HCSTRING("clickable","\xe2","\xad","\x8e","\x34")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,throwable),HX_HCSTRING("throwable","\xc0","\x55","\x25","\x7d")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxExtendedSprite_obj,boundsRect),HX_HCSTRING("boundsRect","\x39","\xde","\xba","\x7e")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxExtendedSprite_obj,boundsSprite),HX_HCSTRING("boundsSprite","\x5a","\x9c","\x7f","\x8f")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,hasGravity),HX_HCSTRING("hasGravity","\x14","\x56","\xb3","\x02")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,gravityX),HX_HCSTRING("gravityX","\x4a","\x16","\x81","\x87")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,gravityY),HX_HCSTRING("gravityY","\x4b","\x16","\x81","\x87")},
	{hx::fsFloat,(int)offsetof(FlxExtendedSprite_obj,frictionX),HX_HCSTRING("frictionX","\x1e","\x62","\x80","\x38")},
	{hx::fsFloat,(int)offsetof(FlxExtendedSprite_obj,frictionY),HX_HCSTRING("frictionY","\x1f","\x62","\x80","\x38")},
	{hx::fsFloat,(int)offsetof(FlxExtendedSprite_obj,toleranceX),HX_HCSTRING("toleranceX","\xab","\x2e","\x39","\xd9")},
	{hx::fsFloat,(int)offsetof(FlxExtendedSprite_obj,toleranceY),HX_HCSTRING("toleranceY","\xac","\x2e","\x39","\xd9")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,isDragged),HX_HCSTRING("isDragged","\x48","\xc2","\x51","\xf5")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,draggable),HX_HCSTRING("draggable","\x0d","\x2d","\xd6","\x5d")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,springOnPressed),HX_HCSTRING("springOnPressed","\xb6","\xd2","\x05","\x91")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,springOffsetX),HX_HCSTRING("springOffsetX","\x18","\x7e","\x8c","\xa6")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,springOffsetY),HX_HCSTRING("springOffsetY","\x19","\x7e","\x8c","\xa6")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxExtendedSprite_obj,mousePressedCallback),HX_HCSTRING("mousePressedCallback","\xe2","\x3d","\xcb","\x68")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxExtendedSprite_obj,mouseReleasedCallback),HX_HCSTRING("mouseReleasedCallback","\xe7","\xaf","\x4b","\x6c")},
	{hx::fsObject /*::flixel::addons::display::FlxMouseSpring*/ ,(int)offsetof(FlxExtendedSprite_obj,mouseSpring),HX_HCSTRING("mouseSpring","\xd2","\x0a","\x1e","\xb9")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxExtendedSprite_obj,mouseStartDragCallback),HX_HCSTRING("mouseStartDragCallback","\x76","\xd1","\x88","\x55")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxExtendedSprite_obj,mouseStopDragCallback),HX_HCSTRING("mouseStopDragCallback","\x40","\x19","\xa4","\xb9")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,hasMouseSpring),HX_HCSTRING("hasMouseSpring","\x98","\x4d","\xa8","\xaa")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,_snapOnDrag),HX_HCSTRING("_snapOnDrag","\xbc","\x9f","\xc8","\xce")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,_snapOnRelease),HX_HCSTRING("_snapOnRelease","\xff","\x9e","\x51","\x9b")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,_snapX),HX_HCSTRING("_snapX","\x0f","\x72","\xfb","\x7b")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,_snapY),HX_HCSTRING("_snapY","\x10","\x72","\xfb","\x7b")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,_clickOnRelease),HX_HCSTRING("_clickOnRelease","\x9f","\x21","\xaf","\xfe")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,_clickPixelPerfect),HX_HCSTRING("_clickPixelPerfect","\x50","\xdc","\x03","\x38")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,_clickPixelPerfectAlpha),HX_HCSTRING("_clickPixelPerfectAlpha","\xee","\x98","\xcf","\x11")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,_clickCounter),HX_HCSTRING("_clickCounter","\x73","\x86","\xf2","\xf1")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,_throwXFactor),HX_HCSTRING("_throwXFactor","\xc0","\xa5","\xd3","\x19")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,_throwYFactor),HX_HCSTRING("_throwYFactor","\x81","\x1c","\x69","\x43")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,_dragPixelPerfect),HX_HCSTRING("_dragPixelPerfect","\x9a","\xa7","\x19","\xc0")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,_dragPixelPerfectAlpha),HX_HCSTRING("_dragPixelPerfectAlpha","\x64","\xa1","\x42","\x26")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,_dragOffsetX),HX_HCSTRING("_dragOffsetX","\xd2","\xd9","\x8f","\xf3")},
	{hx::fsInt,(int)offsetof(FlxExtendedSprite_obj,_dragOffsetY),HX_HCSTRING("_dragOffsetY","\xd3","\xd9","\x8f","\xf3")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,_dragFromPoint),HX_HCSTRING("_dragFromPoint","\x33","\x24","\xea","\x13")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,_allowHorizontalDrag),HX_HCSTRING("_allowHorizontalDrag","\x62","\x64","\x99","\x55")},
	{hx::fsBool,(int)offsetof(FlxExtendedSprite_obj,_allowVerticalDrag),HX_HCSTRING("_allowVerticalDrag","\x74","\x46","\xda","\xfd")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxExtendedSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxExtendedSprite_obj_sMemberFields[] = {
	HX_HCSTRING("priorityID","\x3f","\x5c","\x5f","\xe4"),
	HX_HCSTRING("isPressed","\xd8","\x4f","\xe5","\x3d"),
	HX_HCSTRING("clickable","\xe2","\xad","\x8e","\x34"),
	HX_HCSTRING("throwable","\xc0","\x55","\x25","\x7d"),
	HX_HCSTRING("boundsRect","\x39","\xde","\xba","\x7e"),
	HX_HCSTRING("boundsSprite","\x5a","\x9c","\x7f","\x8f"),
	HX_HCSTRING("hasGravity","\x14","\x56","\xb3","\x02"),
	HX_HCSTRING("gravityX","\x4a","\x16","\x81","\x87"),
	HX_HCSTRING("gravityY","\x4b","\x16","\x81","\x87"),
	HX_HCSTRING("frictionX","\x1e","\x62","\x80","\x38"),
	HX_HCSTRING("frictionY","\x1f","\x62","\x80","\x38"),
	HX_HCSTRING("toleranceX","\xab","\x2e","\x39","\xd9"),
	HX_HCSTRING("toleranceY","\xac","\x2e","\x39","\xd9"),
	HX_HCSTRING("isDragged","\x48","\xc2","\x51","\xf5"),
	HX_HCSTRING("draggable","\x0d","\x2d","\xd6","\x5d"),
	HX_HCSTRING("springOnPressed","\xb6","\xd2","\x05","\x91"),
	HX_HCSTRING("springOffsetX","\x18","\x7e","\x8c","\xa6"),
	HX_HCSTRING("springOffsetY","\x19","\x7e","\x8c","\xa6"),
	HX_HCSTRING("mousePressedCallback","\xe2","\x3d","\xcb","\x68"),
	HX_HCSTRING("mouseReleasedCallback","\xe7","\xaf","\x4b","\x6c"),
	HX_HCSTRING("mouseSpring","\xd2","\x0a","\x1e","\xb9"),
	HX_HCSTRING("mouseStartDragCallback","\x76","\xd1","\x88","\x55"),
	HX_HCSTRING("mouseStopDragCallback","\x40","\x19","\xa4","\xb9"),
	HX_HCSTRING("hasMouseSpring","\x98","\x4d","\xa8","\xaa"),
	HX_HCSTRING("_snapOnDrag","\xbc","\x9f","\xc8","\xce"),
	HX_HCSTRING("_snapOnRelease","\xff","\x9e","\x51","\x9b"),
	HX_HCSTRING("_snapX","\x0f","\x72","\xfb","\x7b"),
	HX_HCSTRING("_snapY","\x10","\x72","\xfb","\x7b"),
	HX_HCSTRING("_clickOnRelease","\x9f","\x21","\xaf","\xfe"),
	HX_HCSTRING("_clickPixelPerfect","\x50","\xdc","\x03","\x38"),
	HX_HCSTRING("_clickPixelPerfectAlpha","\xee","\x98","\xcf","\x11"),
	HX_HCSTRING("_clickCounter","\x73","\x86","\xf2","\xf1"),
	HX_HCSTRING("_throwXFactor","\xc0","\xa5","\xd3","\x19"),
	HX_HCSTRING("_throwYFactor","\x81","\x1c","\x69","\x43"),
	HX_HCSTRING("_dragPixelPerfect","\x9a","\xa7","\x19","\xc0"),
	HX_HCSTRING("_dragPixelPerfectAlpha","\x64","\xa1","\x42","\x26"),
	HX_HCSTRING("_dragOffsetX","\xd2","\xd9","\x8f","\xf3"),
	HX_HCSTRING("_dragOffsetY","\xd3","\xd9","\x8f","\xf3"),
	HX_HCSTRING("_dragFromPoint","\x33","\x24","\xea","\x13"),
	HX_HCSTRING("_allowHorizontalDrag","\x62","\x64","\x99","\x55"),
	HX_HCSTRING("_allowVerticalDrag","\x74","\x46","\xda","\xfd"),
	HX_HCSTRING("enableMouseClicks","\x6d","\x39","\x59","\x7c"),
	HX_HCSTRING("disableMouseClicks","\x28","\x9e","\x22","\x9b"),
	HX_HCSTRING("enableMouseDrag","\xb6","\xad","\xc5","\xd2"),
	HX_HCSTRING("disableMouseDrag","\xb1","\xdd","\xe6","\xc2"),
	HX_HCSTRING("enableMouseThrow","\x24","\x65","\x0c","\xca"),
	HX_HCSTRING("disableMouseThrow","\xc9","\x30","\xf5","\xf6"),
	HX_HCSTRING("enableMouseSnap","\x0c","\xd8","\xac","\xdc"),
	HX_HCSTRING("disableMouseSnap","\x07","\x08","\xce","\xcc"),
	HX_HCSTRING("enableMouseSpring","\x0f","\xcd","\xa0","\x35"),
	HX_HCSTRING("disableMouseSpring","\xca","\x31","\x6a","\x54"),
	HX_HCSTRING("setDragLock","\xc1","\xc7","\x18","\x56"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateGravity","\x45","\xd3","\x6d","\x43"),
	HX_HCSTRING("updateDrag","\x9d","\x16","\x25","\xfb"),
	HX_HCSTRING("checkForClick","\x67","\x61","\x7d","\x2a"),
	HX_HCSTRING("mousePressedHandler","\x4d","\xbe","\x1d","\xfb"),
	HX_HCSTRING("mouseReleasedHandler","\xe8","\x33","\x44","\x59"),
	HX_HCSTRING("startDrag","\x76","\xa5","\x63","\xfb"),
	HX_HCSTRING("checkBoundsRect","\x21","\x45","\x14","\xf8"),
	HX_HCSTRING("checkBoundsSprite","\x42","\x8d","\x2e","\x1f"),
	HX_HCSTRING("stopDrag","\x16","\x71","\x2a","\x95"),
	HX_HCSTRING("setGravity","\xcc","\x92","\xde","\xca"),
	HX_HCSTRING("flipGravity","\x21","\xe3","\x6f","\x48"),
	HX_HCSTRING("get_clicks","\xf4","\xb2","\xd5","\xfa"),
	HX_HCSTRING("set_clicks","\x68","\x51","\x53","\xfe"),
	HX_HCSTRING("get_springX","\x02","\x7d","\x80","\xe5"),
	HX_HCSTRING("get_springY","\x03","\x7d","\x80","\xe5"),
	HX_HCSTRING("get_point","\xa7","\x10","\x39","\x0a"),
	HX_HCSTRING("set_point","\xb3","\xfc","\x89","\xed"),
	HX_HCSTRING("get_mouseOver","\xf0","\x1d","\x71","\xb7"),
	HX_HCSTRING("get_mouseX","\x5c","\xba","\x95","\xbc"),
	HX_HCSTRING("get_mouseY","\x5d","\xba","\x95","\xbc"),
	HX_HCSTRING("get_rect","\xad","\x08","\x62","\xcb"),
	::String(null()) };

static void FlxExtendedSprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxExtendedSprite_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxExtendedSprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxExtendedSprite_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxExtendedSprite_obj::__mClass;

void FlxExtendedSprite_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.display.FlxExtendedSprite","\x7b","\xbb","\xe3","\x11");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxExtendedSprite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxExtendedSprite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxExtendedSprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxExtendedSprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxExtendedSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxExtendedSprite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace display
