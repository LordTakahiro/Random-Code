// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxExtendedSprite
#include <flixel/addons/display/FlxExtendedSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxMouseSpring
#include <flixel/addons/display/FlxMouseSpring.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

namespace flixel{
namespace addons{
namespace display{

void FlxMouseSpring_obj::__construct( ::flixel::addons::display::FlxExtendedSprite Sprite,hx::Null< Bool >  __o_RetainVelocity,hx::Null< Float >  __o_Tension,hx::Null< Float >  __o_Friction,hx::Null< Float >  __o_Gravity){
Bool RetainVelocity = __o_RetainVelocity.Default(false);
Float Tension = __o_Tension.Default(((Float)0.1));
Float Friction = __o_Friction.Default(((Float)0.95));
Float Gravity = __o_Gravity.Default(0);
            	HX_STACK_FRAME("flixel.addons.display.FlxMouseSpring","new",0x7170d847,"flixel.addons.display.FlxMouseSpring.new","flixel/addons/display/FlxMouseSpring.hx",6,0xe39b05c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(RetainVelocity,"RetainVelocity")
            	HX_STACK_ARG(Tension,"Tension")
            	HX_STACK_ARG(Friction,"Friction")
            	HX_STACK_ARG(Gravity,"Gravity")
HXLINE(  34)		this->_ay = ((Float)0);
HXLINE(  33)		this->_ax = ((Float)0);
HXLINE(  31)		this->_dy = ((Float)0);
HXLINE(  30)		this->_dx = ((Float)0);
HXLINE(  28)		this->_vy = ((Float)0);
HXLINE(  27)		this->_vx = ((Float)0);
HXLINE(  47)		this->sprite = Sprite;
HXLINE(  48)		this->_retainVelocity = RetainVelocity;
HXLINE(  49)		this->tension = Tension;
HXLINE(  50)		this->friction = Friction;
HXLINE(  51)		this->gravity = Gravity;
            	}

Dynamic FlxMouseSpring_obj::__CreateEmpty() { return new FlxMouseSpring_obj; }

hx::ObjectPtr< FlxMouseSpring_obj > FlxMouseSpring_obj::__new( ::flixel::addons::display::FlxExtendedSprite Sprite,hx::Null< Bool >  __o_RetainVelocity,hx::Null< Float >  __o_Tension,hx::Null< Float >  __o_Friction,hx::Null< Float >  __o_Gravity)
{
	hx::ObjectPtr< FlxMouseSpring_obj > _hx_result = new FlxMouseSpring_obj();
	_hx_result->__construct(Sprite,__o_RetainVelocity,__o_Tension,__o_Friction,__o_Gravity);
	return _hx_result;
}

Dynamic FlxMouseSpring_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxMouseSpring_obj > _hx_result = new FlxMouseSpring_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

void FlxMouseSpring_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.addons.display.FlxMouseSpring","update",0x1f372882,"flixel.addons.display.FlxMouseSpring.update","flixel/addons/display/FlxMouseSpring.hx",58,0xe39b05c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  59)		Int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN(  59)		HX_VARI(  ::flixel::addons::display::FlxExtendedSprite,_this) = this->sprite;
HXDLIN(  59)		Float _hx_tmp1 = (_this->x + _this->springOffsetX);
HXDLIN(  59)		Int _hx_tmp2 = ::Math_obj::floor(_hx_tmp1);
HXDLIN(  59)		this->_dx = (_hx_tmp - _hx_tmp2);
HXLINE(  60)		Int _hx_tmp3 = ::flixel::FlxG_obj::mouse->y;
HXDLIN(  60)		HX_VARI_NAME(  ::flixel::addons::display::FlxExtendedSprite,_this1,"_this") = this->sprite;
HXDLIN(  60)		Float _hx_tmp4 = (_this1->y + _this1->springOffsetY);
HXDLIN(  60)		Int _hx_tmp5 = ::Math_obj::floor(_hx_tmp4);
HXDLIN(  60)		this->_dy = (_hx_tmp3 - _hx_tmp5);
HXLINE(  62)		this->_ax = (this->_dx * this->tension);
HXLINE(  63)		this->_ay = (this->_dy * this->tension);
HXLINE(  65)		hx::AddEq(this->_vx,this->_ax);
HXLINE(  66)		hx::AddEq(this->_vy,this->_ay);
HXLINE(  68)		hx::AddEq(this->_vy,this->gravity);
HXLINE(  69)		hx::MultEq(this->_vx,this->friction);
HXLINE(  70)		hx::MultEq(this->_vy,this->friction);
HXLINE(  72)		{
HXLINE(  72)			HX_VARI(  ::flixel::addons::display::FlxExtendedSprite,_g) = this->sprite;
HXDLIN(  72)			Float _hx_tmp6 = (_g->x + this->_vx);
HXDLIN(  72)			_g->set_x(_hx_tmp6);
            		}
HXLINE(  73)		{
HXLINE(  73)			HX_VARI_NAME(  ::flixel::addons::display::FlxExtendedSprite,_g1,"_g") = this->sprite;
HXDLIN(  73)			Float _hx_tmp7 = (_g1->y + this->_vy);
HXDLIN(  73)			_g1->set_y(_hx_tmp7);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxMouseSpring_obj,update,(void))

void FlxMouseSpring_obj::reset(){
            	HX_STACK_FRAME("flixel.addons.display.FlxMouseSpring","reset",0x9f245976,"flixel.addons.display.FlxMouseSpring.reset","flixel/addons/display/FlxMouseSpring.hx",80,0xe39b05c8)
            	HX_STACK_THIS(this)
HXLINE(  81)		this->_vx = (int)0;
HXLINE(  82)		this->_vy = (int)0;
HXLINE(  84)		this->_dx = (int)0;
HXLINE(  85)		this->_dy = (int)0;
HXLINE(  87)		this->_ax = (int)0;
HXLINE(  88)		this->_ay = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouseSpring_obj,reset,(void))


FlxMouseSpring_obj::FlxMouseSpring_obj()
{
}

void FlxMouseSpring_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxMouseSpring);
	HX_MARK_MEMBER_NAME(sprite,"sprite");
	HX_MARK_MEMBER_NAME(tension,"tension");
	HX_MARK_MEMBER_NAME(friction,"friction");
	HX_MARK_MEMBER_NAME(gravity,"gravity");
	HX_MARK_MEMBER_NAME(_retainVelocity,"_retainVelocity");
	HX_MARK_MEMBER_NAME(_vx,"_vx");
	HX_MARK_MEMBER_NAME(_vy,"_vy");
	HX_MARK_MEMBER_NAME(_dx,"_dx");
	HX_MARK_MEMBER_NAME(_dy,"_dy");
	HX_MARK_MEMBER_NAME(_ax,"_ax");
	HX_MARK_MEMBER_NAME(_ay,"_ay");
	HX_MARK_END_CLASS();
}

void FlxMouseSpring_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sprite,"sprite");
	HX_VISIT_MEMBER_NAME(tension,"tension");
	HX_VISIT_MEMBER_NAME(friction,"friction");
	HX_VISIT_MEMBER_NAME(gravity,"gravity");
	HX_VISIT_MEMBER_NAME(_retainVelocity,"_retainVelocity");
	HX_VISIT_MEMBER_NAME(_vx,"_vx");
	HX_VISIT_MEMBER_NAME(_vy,"_vy");
	HX_VISIT_MEMBER_NAME(_dx,"_dx");
	HX_VISIT_MEMBER_NAME(_dy,"_dy");
	HX_VISIT_MEMBER_NAME(_ax,"_ax");
	HX_VISIT_MEMBER_NAME(_ay,"_ay");
}

hx::Val FlxMouseSpring_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_vx") ) { return hx::Val( _vx); }
		if (HX_FIELD_EQ(inName,"_vy") ) { return hx::Val( _vy); }
		if (HX_FIELD_EQ(inName,"_dx") ) { return hx::Val( _dx); }
		if (HX_FIELD_EQ(inName,"_dy") ) { return hx::Val( _dy); }
		if (HX_FIELD_EQ(inName,"_ax") ) { return hx::Val( _ax); }
		if (HX_FIELD_EQ(inName,"_ay") ) { return hx::Val( _ay); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sprite") ) { return hx::Val( sprite); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tension") ) { return hx::Val( tension); }
		if (HX_FIELD_EQ(inName,"gravity") ) { return hx::Val( gravity); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"friction") ) { return hx::Val( friction); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_retainVelocity") ) { return hx::Val( _retainVelocity); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxMouseSpring_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_vx") ) { _vx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_vy") ) { _vy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dx") ) { _dx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dy") ) { _dy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ax") ) { _ax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ay") ) { _ay=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sprite") ) { sprite=inValue.Cast<  ::flixel::addons::display::FlxExtendedSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tension") ) { tension=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravity") ) { gravity=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"friction") ) { friction=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_retainVelocity") ) { _retainVelocity=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxMouseSpring_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3"));
	outFields->push(HX_HCSTRING("tension","\x92","\xa7","\x2c","\xdc"));
	outFields->push(HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97"));
	outFields->push(HX_HCSTRING("gravity","\x4e","\x6e","\xff","\x77"));
	outFields->push(HX_HCSTRING("_retainVelocity","\xa1","\x43","\x7b","\x99"));
	outFields->push(HX_HCSTRING("_vx","\x61","\x7d","\x48","\x00"));
	outFields->push(HX_HCSTRING("_vy","\x62","\x7d","\x48","\x00"));
	outFields->push(HX_HCSTRING("_dx","\xb3","\x6d","\x48","\x00"));
	outFields->push(HX_HCSTRING("_dy","\xb4","\x6d","\x48","\x00"));
	outFields->push(HX_HCSTRING("_ax","\x16","\x6b","\x48","\x00"));
	outFields->push(HX_HCSTRING("_ay","\x17","\x6b","\x48","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxMouseSpring_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::addons::display::FlxExtendedSprite*/ ,(int)offsetof(FlxMouseSpring_obj,sprite),HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3")},
	{hx::fsFloat,(int)offsetof(FlxMouseSpring_obj,tension),HX_HCSTRING("tension","\x92","\xa7","\x2c","\xdc")},
	{hx::fsFloat,(int)offsetof(FlxMouseSpring_obj,friction),HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97")},
	{hx::fsFloat,(int)offsetof(FlxMouseSpring_obj,gravity),HX_HCSTRING("gravity","\x4e","\x6e","\xff","\x77")},
	{hx::fsBool,(int)offsetof(FlxMouseSpring_obj,_retainVelocity),HX_HCSTRING("_retainVelocity","\xa1","\x43","\x7b","\x99")},
	{hx::fsFloat,(int)offsetof(FlxMouseSpring_obj,_vx),HX_HCSTRING("_vx","\x61","\x7d","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(FlxMouseSpring_obj,_vy),HX_HCSTRING("_vy","\x62","\x7d","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(FlxMouseSpring_obj,_dx),HX_HCSTRING("_dx","\xb3","\x6d","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(FlxMouseSpring_obj,_dy),HX_HCSTRING("_dy","\xb4","\x6d","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(FlxMouseSpring_obj,_ax),HX_HCSTRING("_ax","\x16","\x6b","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(FlxMouseSpring_obj,_ay),HX_HCSTRING("_ay","\x17","\x6b","\x48","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxMouseSpring_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxMouseSpring_obj_sMemberFields[] = {
	HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3"),
	HX_HCSTRING("tension","\x92","\xa7","\x2c","\xdc"),
	HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97"),
	HX_HCSTRING("gravity","\x4e","\x6e","\xff","\x77"),
	HX_HCSTRING("_retainVelocity","\xa1","\x43","\x7b","\x99"),
	HX_HCSTRING("_vx","\x61","\x7d","\x48","\x00"),
	HX_HCSTRING("_vy","\x62","\x7d","\x48","\x00"),
	HX_HCSTRING("_dx","\xb3","\x6d","\x48","\x00"),
	HX_HCSTRING("_dy","\xb4","\x6d","\x48","\x00"),
	HX_HCSTRING("_ax","\x16","\x6b","\x48","\x00"),
	HX_HCSTRING("_ay","\x17","\x6b","\x48","\x00"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	::String(null()) };

static void FlxMouseSpring_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxMouseSpring_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxMouseSpring_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxMouseSpring_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxMouseSpring_obj::__mClass;

void FlxMouseSpring_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.display.FlxMouseSpring","\xd5","\xa8","\x67","\x1d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxMouseSpring_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxMouseSpring_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxMouseSpring_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxMouseSpring_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxMouseSpring_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxMouseSpring_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace display
