// Generated by Haxe 3.3.0
#ifndef INCLUDED_Player
#define INCLUDED_Player

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(Inventory)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Player_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Player_obj OBJ_;
		Player_obj();

	public:
		void __construct( ::Dynamic __o_X, ::Dynamic __o_Y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Player")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Player"); }
		static hx::ObjectPtr< Player_obj > __new( ::Dynamic __o_X, ::Dynamic __o_Y);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Player_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c"); }

		 ::flixel::_hx_system::FlxSound _sndStep;
		 ::flixel::_hx_system::FlxSound _sndHurt;
		::cpp::VirtualArray inventory;
		::cpp::VirtualArray equipped;
		Float speed;
		Int mana;
		Int str;
		Int _hx_int;
		Int dex;
		Int vit;
		Int will;
		Int luck;
		Int def;
		void movment();
		::Dynamic movment_dyn();

		void takeDamage(Int amount);
		::Dynamic takeDamage_dyn();

		void randomButton();
		::Dynamic randomButton_dyn();

		void openInventory( ::Inventory _inv,Bool arg);
		::Dynamic openInventory_dyn();

		void update(Float elapsed);

		Int get_str();
		::Dynamic get_str_dyn();

		Int set_str(Int value);
		::Dynamic set_str_dyn();

		Int get_mana();
		::Dynamic get_mana_dyn();

		Int set_mana(Int value);
		::Dynamic set_mana_dyn();

		Int get_int();
		::Dynamic get_int_dyn();

		Int set_int(Int value);
		::Dynamic set_int_dyn();

		Int get_dex();
		::Dynamic get_dex_dyn();

		Int set_dex(Int value);
		::Dynamic set_dex_dyn();

		Int get_vit();
		::Dynamic get_vit_dyn();

		Int set_vit(Int value);
		::Dynamic set_vit_dyn();

		Int get_will();
		::Dynamic get_will_dyn();

		Int set_will(Int value);
		::Dynamic set_will_dyn();

		Int get_luck();
		::Dynamic get_luck_dyn();

		Int set_luck(Int value);
		::Dynamic set_luck_dyn();

		Int get_def();
		::Dynamic get_def_dyn();

		Int set_def(Int value);
		::Dynamic set_def_dyn();

};


#endif /* INCLUDED_Player */ 
