// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_addons_display_FlxExtendedSprite
#define INCLUDED_flixel_addons_display_FlxExtendedSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,display,FlxExtendedSprite)
HX_DECLARE_CLASS3(flixel,addons,display,FlxMouseSpring)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,math,FlxRect)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace flixel{
namespace addons{
namespace display{


class HXCPP_CLASS_ATTRIBUTES FlxExtendedSprite_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef FlxExtendedSprite_obj OBJ_;
		FlxExtendedSprite_obj();

	public:
		void __construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.display.FlxExtendedSprite")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.addons.display.FlxExtendedSprite"); }
		static hx::ObjectPtr< FlxExtendedSprite_obj > __new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxExtendedSprite_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("FlxExtendedSprite","\x90","\x31","\x20","\x48"); }

		Int priorityID;
		Bool isPressed;
		Bool clickable;
		Bool throwable;
		 ::flixel::math::FlxRect boundsRect;
		 ::flixel::FlxSprite boundsSprite;
		Bool hasGravity;
		Int gravityX;
		Int gravityY;
		Float frictionX;
		Float frictionY;
		Float toleranceX;
		Float toleranceY;
		Bool isDragged;
		Bool draggable;
		Bool springOnPressed;
		Int springOffsetX;
		Int springOffsetY;
		 ::Dynamic mousePressedCallback;
		 ::Dynamic &mousePressedCallback_dyn() { return mousePressedCallback;}
		 ::Dynamic mouseReleasedCallback;
		 ::Dynamic &mouseReleasedCallback_dyn() { return mouseReleasedCallback;}
		 ::flixel::addons::display::FlxMouseSpring mouseSpring;
		 ::Dynamic mouseStartDragCallback;
		 ::Dynamic &mouseStartDragCallback_dyn() { return mouseStartDragCallback;}
		 ::Dynamic mouseStopDragCallback;
		 ::Dynamic &mouseStopDragCallback_dyn() { return mouseStopDragCallback;}
		Bool hasMouseSpring;
		Bool _snapOnDrag;
		Bool _snapOnRelease;
		Int _snapX;
		Int _snapY;
		Bool _clickOnRelease;
		Bool _clickPixelPerfect;
		Int _clickPixelPerfectAlpha;
		Int _clickCounter;
		Int _throwXFactor;
		Int _throwYFactor;
		Bool _dragPixelPerfect;
		Int _dragPixelPerfectAlpha;
		Int _dragOffsetX;
		Int _dragOffsetY;
		Bool _dragFromPoint;
		Bool _allowHorizontalDrag;
		Bool _allowVerticalDrag;
		void enableMouseClicks(Bool OnRelease,hx::Null< Bool >  PixelPerfect,hx::Null< Int >  AlphaThreshold);
		::Dynamic enableMouseClicks_dyn();

		void disableMouseClicks();
		::Dynamic disableMouseClicks_dyn();

		void enableMouseDrag(hx::Null< Bool >  LockCenter,hx::Null< Bool >  PixelPerfect,hx::Null< Int >  AlphaThreshold, ::flixel::math::FlxRect BoundsRect, ::flixel::FlxSprite BoundsSprite);
		::Dynamic enableMouseDrag_dyn();

		void disableMouseDrag();
		::Dynamic disableMouseDrag_dyn();

		void enableMouseThrow(Int FactorX,Int FactorY);
		::Dynamic enableMouseThrow_dyn();

		void disableMouseThrow();
		::Dynamic disableMouseThrow_dyn();

		void enableMouseSnap(Int SnapX,Int SnapY,hx::Null< Bool >  OnDrag,hx::Null< Bool >  OnRelease);
		::Dynamic enableMouseSnap_dyn();

		void disableMouseSnap();
		::Dynamic disableMouseSnap_dyn();

		 ::flixel::addons::display::FlxMouseSpring enableMouseSpring(hx::Null< Bool >  OnPressed,hx::Null< Bool >  RetainVelocity,hx::Null< Float >  Tension,hx::Null< Float >  Friction,hx::Null< Float >  Gravity);
		::Dynamic enableMouseSpring_dyn();

		void disableMouseSpring();
		::Dynamic disableMouseSpring_dyn();

		void setDragLock(hx::Null< Bool >  AllowHorizontalDrag,hx::Null< Bool >  AllowVerticalDrag);
		::Dynamic setDragLock_dyn();

		void update(Float elapsed);

		void updateGravity();
		::Dynamic updateGravity_dyn();

		void updateDrag();
		::Dynamic updateDrag_dyn();

		void checkForClick();
		::Dynamic checkForClick_dyn();

		void mousePressedHandler();
		::Dynamic mousePressedHandler_dyn();

		void mouseReleasedHandler();
		::Dynamic mouseReleasedHandler_dyn();

		void startDrag();
		::Dynamic startDrag_dyn();

		void checkBoundsRect();
		::Dynamic checkBoundsRect_dyn();

		void checkBoundsSprite();
		::Dynamic checkBoundsSprite_dyn();

		void stopDrag();
		::Dynamic stopDrag_dyn();

		void setGravity(Int GravityX,Int GravityY,hx::Null< Float >  FrictionX,hx::Null< Float >  FrictionY,hx::Null< Float >  ToleranceX,hx::Null< Float >  ToleranceY);
		::Dynamic setGravity_dyn();

		void flipGravity();
		::Dynamic flipGravity_dyn();

		Int get_clicks();
		::Dynamic get_clicks_dyn();

		Int set_clicks(Int NewValue);
		::Dynamic set_clicks_dyn();

		Int get_springX();
		::Dynamic get_springX_dyn();

		Int get_springY();
		::Dynamic get_springY_dyn();

		 ::flixel::math::FlxPoint get_point();
		::Dynamic get_point_dyn();

		 ::flixel::math::FlxPoint set_point( ::flixel::math::FlxPoint NewPoint);
		::Dynamic set_point_dyn();

		Bool get_mouseOver();
		::Dynamic get_mouseOver_dyn();

		Int get_mouseX();
		::Dynamic get_mouseX_dyn();

		Int get_mouseY();
		::Dynamic get_mouseY_dyn();

		 ::flixel::math::FlxRect get_rect();
		::Dynamic get_rect_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace display

#endif /* INCLUDED_flixel_addons_display_FlxExtendedSprite */ 
