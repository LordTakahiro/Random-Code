// Generated by Haxe 3.3.0
#ifndef INCLUDED_Inventory
#define INCLUDED_Inventory

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS0(Inventory)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,display,FlxExtendedSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,ui,FlxButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Inventory_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef Inventory_obj OBJ_;
		Inventory_obj();

	public:
		void __construct(::cpp::VirtualArray equipment);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Inventory")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Inventory"); }
		static hx::ObjectPtr< Inventory_obj > __new(::cpp::VirtualArray equipment);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Inventory_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Inventory","\x7c","\x56","\x89","\xea"); }

		static void __boot();
		static Int MAX_SLOTS;
		static Int MAX_SPACING;
		 ::flixel::addons::display::FlxExtendedSprite _sprSlot;
		 ::flixel::FlxSprite _sprBack;
		 ::flixel::ui::FlxButton _btnLeft;
		 ::flixel::ui::FlxButton _btnRight;
		::Array< ::Dynamic> slotArry;
		void createSlots();
		::Dynamic createSlots_dyn();

		void onOver(Int e);
		::Dynamic onOver_dyn();

		void onDown(Int e);
		::Dynamic onDown_dyn();

		void onOut(Int e);
		::Dynamic onOut_dyn();

		void invButton();
		::Dynamic invButton_dyn();

		void updateItems(::cpp::VirtualArray equipment);
		::Dynamic updateItems_dyn();

		void addItem( ::flixel::FlxObject item);
		::Dynamic addItem_dyn();

		void removeItem( ::flixel::FlxObject item);
		::Dynamic removeItem_dyn();

};


#endif /* INCLUDED_Inventory */ 
